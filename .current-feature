Feature 2: Music Project Management

Branch: feature/projects-crud

⸻

1. Feature Definition
	•	What does it do?
Allows the user to create, view, edit, and delete personal music projects.
	•	Goal:
Provide the user with a clear system to organize and keep track of each idea or track they're producing.
	•	Value:
This is the operational core of the app. A project groups tasks, ideas, notes, files, etc. Without it, the rest of the app lacks context.

⸻

2. Functional Requirements
	•	Create new project (name, description, initial status)
	•	View user's project list
	•	Edit an existing project
	•	Delete a project
	•	Show project details
	•	Error cases:
	•	Empty name
	•	Project not found
	•	Network issues

⸻

3. Technical Requirements
	•	Requires internet connection (for Firestore)
	•	Uses Firebase Firestore (collection: projects)
	•	No external APIs used
	•	Can be cached locally in the future (Isar)

⸻

4. Data Modeling
	•	Main entity: Project

class Project {
  final String id;
  final String userId;
  final String title;
  final String? description;
  final DateTime createdAt;
  final String status; // e.g., 'draft', 'in_progress', 'finished'
}


5. UI/UX Design
	•	Screens needed:
	•	Project list (ProjectsPage)
	•	Create/Edit form (ProjectForm)
	•	Project details (ProjectDetails)
	•	Flows:
	•	Create → List → Detail
	•	Edit → Updated detail
	•	Delete → Back to list
	•	UX:
	•	Confirmation before deleting
	•	Instant field validation
	•	Sort by creation date

⸻

6. Architecture & Structure
	•	Feature module: projects
	•	Clean Architecture layers:
	•	Domain:
	•	CreateProjectUseCase, UpdateProjectUseCase, etc.
	•	ProjectsRepository
	•	Data:
	•	ProjectsRemoteDataSource (uses Firestore)
	•	Presentation:
	•	ProjectsBloc
	•	ProjectsPage, ProjectForm, ProjectDetailsPage

⸻

7. State Management
	•	Bloc Events:
	•	LoadProjects
	•	CreateProject
	•	UpdateProject
	•	DeleteProject
	•	Bloc States:
	•	ProjectsLoading, ProjectsLoaded, ProjectOperationSuccess, ProjectError
	•	Side effects:
	•	Read/write to Firestore
	•	Show Snackbars for errors/confirmations

⸻

8. Security & Authentication
	•	Only authenticated users can create/view their projects
	•	Firestore rule (for projects):

match /projects/{projectId} {
  allow read, write: if request.auth.uid == resource.data.userId;
}

Validations:
	•	Don't allow creation without title
	•	Don't allow editing projects from other users

⸻

9. Testing
	•	Unit tests:
	•	Validate model data
	•	Use case logic (create, edit, delete)
	•	Integration:
	•	Simulate Firestore interactions using mocks
	•	Widget tests:
	•	Create form
	•	Project list displays data correctly
	•	Firestore can be mocked using cloud_firestore_mocks

⸻

10. Scalability & Maintainability
	•	Easy to scale:
	•	Can add files, tasks, tags
	•	Can evolve into "Workspaces" or "Collaborations"
	•	Well-structured in modules
	•	Business logic lives in decoupled use cases

⸻

11. Integration & Deployment
	•	Connects to Auth: user only sees their own projects
	•	Modular and easy to test
	•	Git branches per feature: feature/projects-crud