---
description: 
globs: 
alwaysApply: false
---
üéØ MISSION CONTEXT

You are assisting in the development of the audio playback system for a Flutter mobile application called TrackFlow. The app is a collaborative audio feedback tool, where users can comment on audio tracks inside projects. Your responsibility is to engineer a world-class playback experience, covering UI, state management, offline support, and collaborative interactions.

‚∏ª

üìú TECHNICAL & SOFTWARE ENGINEERING RULES FOR AUDIO PLAYBACK SYSTEM (TrackFlow)

‚úÖ GENERAL ARCHITECTURE
	1.	The audio player system must be controlled by a centralized PlaybackController (Bloc or service) that exposes the full playback state:
	‚Ä¢	currentTrack
	‚Ä¢	playbackQueue
	‚Ä¢	isPlaying
	‚Ä¢	playbackPosition
	‚Ä¢	isShuffling
	‚Ä¢	isLooping
	‚Ä¢	bufferingState
	2.	All player UIs (mini-player, full player, comment screen) must reactively consume this shared global state and must never manage audio logic locally.
	3.	Only one AudioPlayer instance is allowed at runtime to ensure clean playback and synchronized state.
	4.	Playback state must be persisted locally so that when the app restarts, it can:
	‚Ä¢	Resume the previous track
	‚Ä¢	Restore the playback queue
	‚Ä¢	Seek to the last known position

‚∏ª

üéß PLAYBACK FUNCTIONALITY (OBLIGATORY)
	5.	Track playback must support both:
	‚Ä¢	Single track play
	‚Ä¢	Sequential queue play (project playlist)
	6.	When a track is played from a project list, the playback queue must be populated accordingly, starting from the selected track and maintaining the original order.
	7.	The queue must support:
	‚Ä¢	Skip to next / previous
	‚Ä¢	Loop (single track or queue)
	‚Ä¢	Shuffle mode
	8.	If the user reaches the end of the queue, playback must stop or loop depending on the active mode.

‚∏ª

üîÅ STREAMING & CACHING (OBLIGATORY)
	9.	A dedicated AudioSourceResolver service must determine if a track:
	‚Ä¢	Is cached locally ‚Üí play from cache
	‚Ä¢	Is not cached ‚Üí stream from remote URL and begin caching it in background
	10.	Each track must have a flag isCached stored in local metadata.
	11.	Playback should be transparent to the user‚Äîwhether cached or streamed, the user experience must be seamless.
	12.	Users must be able to:

	‚Ä¢	Download a single track manually
	‚Ä¢	Download all tracks of a project as a ‚Äúbatch download‚Äù

	13.	The system must handle download progress per track and expose this as part of the local track state.
	14.	If a download fails, the system must retry or expose a clear error state.

‚∏ª

üéõÔ∏è PLAYER UI SYNC & EXPERIENCE (OBLIGATORY)
	15.	All player UIs must reflect the playback state in real-time:

	‚Ä¢	Current track info (title, artist, duration)
	‚Ä¢	Playback progress and seek bar
	‚Ä¢	Play/Pause/Next/Previous buttons
	‚Ä¢	Cached/downloaded status indicator

	16.	The currently playing track in a list must have a visual indicator. Suggestions:

	‚Ä¢	Highlight (e.g. green title or icon)
	‚Ä¢	Animated waveform or EQ bars
	‚Ä¢	Bold text or progress overlay

	17.	All playback UIs must smoothly transition between each other (e.g., expanding mini player into full screen player).
	18.	Scrubbing must be supported on both standard progress bars and waveform visualizations (in the comment view).

‚∏ª

üí¨ COLLABORATIVE COMMENTING (DIFFERENTIATOR)
	19.	In the comment screen, audio playback must sync precisely with the waveform and user interaction.
	20.	Users must be able to:

	‚Ä¢	Leave time-stamped comments
	‚Ä¢	Jump to specific timestamps via comment taps
	‚Ä¢	Navigate timeline via waveform

	21.	When the user presses ‚ÄúComment on track,‚Äù the audio player must enter a ‚Äúcomment mode‚Äù, exposing:

	‚Ä¢	Playback controls
	‚Ä¢	Waveform visualization
	‚Ä¢	Comment input anchored to the current playback time

‚∏ª

üõú OFFLINE-FIRST STRATEGY (OBLIGATORY)
	22.	The app must support full playback and feedback interaction even in offline mode, provided the tracks are cached.
	23.	Cached tracks must be verifiable and usable with no internet connection.
	24.	All download and playback logic must be integrated with the app‚Äôs Startup Resource Manager to prepare offline resources on first project access.
