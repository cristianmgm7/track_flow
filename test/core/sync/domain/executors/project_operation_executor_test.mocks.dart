// Mocks generated by Mockito 5.4.4 from annotations
// in trackflow/test/core/sync/domain/executors/project_operation_executor_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:trackflow/core/error/failures.dart' as _i5;
import 'package:trackflow/features/projects/data/datasources/project_remote_data_source.dart'
    as _i3;
import 'package:trackflow/features/projects/data/models/project_dto.dart'
    as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ProjectRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockProjectRemoteDataSource extends _i1.Mock
    implements _i3.ProjectRemoteDataSource {
  MockProjectRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.ProjectDTO>> createProject(
          _i6.ProjectDTO? project) =>
      (super.noSuchMethod(
        Invocation.method(
          #createProject,
          [project],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.ProjectDTO>>.value(
            _FakeEither_0<_i5.Failure, _i6.ProjectDTO>(
          this,
          Invocation.method(
            #createProject,
            [project],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.ProjectDTO>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> updateProject(
          _i6.ProjectDTO? project) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProject,
          [project],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #updateProject,
            [project],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> deleteProject(
          String? projectId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteProject,
          [projectId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #deleteProject,
            [projectId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.ProjectDTO>> getProjectById(
          String? projectId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProjectById,
          [projectId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.ProjectDTO>>.value(
            _FakeEither_0<_i5.Failure, _i6.ProjectDTO>(
          this,
          Invocation.method(
            #getProjectById,
            [projectId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.ProjectDTO>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.ProjectDTO>>> getUserProjects(
          String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getUserProjects,
          [userId],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, List<_i6.ProjectDTO>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.ProjectDTO>>(
          this,
          Invocation.method(
            #getUserProjects,
            [userId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.ProjectDTO>>>);
}
