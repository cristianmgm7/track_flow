// Mocks generated by Mockito 5.4.4 from annotations
// in trackflow/test/features/audio_player/infrastructure/repositories/audio_content_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:io' as _i8;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:trackflow/core/entities/unique_id.dart' as _i7;
import 'package:trackflow/core/error/failures.dart' as _i5;
import 'package:trackflow/features/audio_player/infrastructure/services/audio_source_resolver.dart'
    as _i9;
import 'package:trackflow/features/audio_track/domain/entities/audio_track.dart'
    as _i6;
import 'package:trackflow/features/audio_track/domain/repositories/audio_track_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AudioTrackRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioTrackRepository extends _i1.Mock
    implements _i3.AudioTrackRepository {
  MockAudioTrackRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.AudioTrack>> getTrackById(
          _i7.AudioTrackId? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTrackById,
          [id],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.AudioTrack>>.value(
            _FakeEither_0<_i5.Failure, _i6.AudioTrack>(
          this,
          Invocation.method(
            #getTrackById,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.AudioTrack>>);

  @override
  _i4.Stream<
      _i2.Either<_i5.Failure, List<_i6.AudioTrack>>> watchTracksByProject(
          _i7.ProjectId? projectId) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchTracksByProject,
          [projectId],
        ),
        returnValue:
            _i4.Stream<_i2.Either<_i5.Failure, List<_i6.AudioTrack>>>.empty(),
      ) as _i4.Stream<_i2.Either<_i5.Failure, List<_i6.AudioTrack>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> uploadAudioTrack({
    required _i8.File? file,
    required _i6.AudioTrack? track,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadAudioTrack,
          [],
          {
            #file: file,
            #track: track,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #uploadAudioTrack,
            [],
            {
              #file: file,
              #track: track,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> deleteTrack(
    String? trackId,
    String? projectId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTrack,
          [
            trackId,
            projectId,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #deleteTrack,
            [
              trackId,
              projectId,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> editTrackName({
    required _i7.AudioTrackId? trackId,
    required _i7.ProjectId? projectId,
    required String? newName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #editTrackName,
          [],
          {
            #trackId: trackId,
            #projectId: projectId,
            #newName: newName,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #editTrackName,
            [],
            {
              #trackId: trackId,
              #projectId: projectId,
              #newName: newName,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);
}

/// A class which mocks [AudioSourceResolver].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioSourceResolver extends _i1.Mock
    implements _i9.AudioSourceResolver {
  MockAudioSourceResolver() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, String>> resolveAudioSource(
    String? originalUrl, {
    String? trackId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #resolveAudioSource,
          [originalUrl],
          {#trackId: trackId},
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, String>>.value(
            _FakeEither_0<_i5.Failure, String>(
          this,
          Invocation.method(
            #resolveAudioSource,
            [originalUrl],
            {#trackId: trackId},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, String>>);

  @override
  _i4.Future<bool> isTrackCached(
    String? url, {
    String? trackId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #isTrackCached,
          [url],
          {#trackId: trackId},
        ),
        returnValue: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, String?>> validateCachedTrack(
    String? url, {
    String? trackId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #validateCachedTrack,
          [url],
          {#trackId: trackId},
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, String?>>.value(
            _FakeEither_0<_i5.Failure, String?>(
          this,
          Invocation.method(
            #validateCachedTrack,
            [url],
            {#trackId: trackId},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, String?>>);

  @override
  _i4.Future<void> startBackgroundCaching(
    String? url, {
    String? trackId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #startBackgroundCaching,
          [url],
          {#trackId: trackId},
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> preloadAudioSource(
    String? url, {
    required String? referenceId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #preloadAudioSource,
          [url],
          {#referenceId: referenceId},
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #preloadAudioSource,
            [url],
            {#referenceId: referenceId},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);
}
