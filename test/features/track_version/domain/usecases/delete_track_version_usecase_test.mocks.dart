// Mocks generated by Mockito 5.4.4 from annotations
// in trackflow/test/features/track_version/domain/usecases/delete_track_version_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:io' as _i8;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:trackflow/core/entities/unique_id.dart' as _i7;
import 'package:trackflow/core/error/failures.dart' as _i5;
import 'package:trackflow/core/infrastructure/domain/directory_service.dart'
    as _i16;
import 'package:trackflow/features/audio_cache/domain/entities/cached_audio.dart'
    as _i15;
import 'package:trackflow/features/audio_cache/domain/failures/cache_failure.dart'
    as _i14;
import 'package:trackflow/features/audio_cache/domain/repositories/audio_storage_repository.dart'
    as _i13;
import 'package:trackflow/features/audio_comment/domain/entities/audio_comment.dart'
    as _i12;
import 'package:trackflow/features/audio_comment/domain/repositories/audio_comment_repository.dart'
    as _i11;
import 'package:trackflow/features/track_version/domain/entities/track_version.dart'
    as _i6;
import 'package:trackflow/features/track_version/domain/repositories/track_version_repository.dart'
    as _i3;
import 'package:trackflow/features/waveform/domain/entities/audio_waveform.dart'
    as _i10;
import 'package:trackflow/features/waveform/domain/repositories/waveform_repository.dart'
    as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TrackVersionRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTrackVersionRepository extends _i1.Mock
    implements _i3.TrackVersionRepository {
  MockTrackVersionRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.TrackVersion>> addVersion({
    required _i7.AudioTrackId? trackId,
    required _i8.File? file,
    String? label,
    Duration? duration,
    required _i7.UserId? createdBy,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addVersion,
          [],
          {
            #trackId: trackId,
            #file: file,
            #label: label,
            #duration: duration,
            #createdBy: createdBy,
          },
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i6.TrackVersion>>.value(
                _FakeEither_0<_i5.Failure, _i6.TrackVersion>(
          this,
          Invocation.method(
            #addVersion,
            [],
            {
              #trackId: trackId,
              #file: file,
              #label: label,
              #duration: duration,
              #createdBy: createdBy,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.TrackVersion>>);

  @override
  _i4.Stream<
      _i2.Either<_i5.Failure, List<_i6.TrackVersion>>> watchVersionsByTrack(
          _i7.AudioTrackId? trackId) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchVersionsByTrack,
          [trackId],
        ),
        returnValue:
            _i4.Stream<_i2.Either<_i5.Failure, List<_i6.TrackVersion>>>.empty(),
      ) as _i4.Stream<_i2.Either<_i5.Failure, List<_i6.TrackVersion>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.TrackVersion>>>
      getVersionsByTrack(_i7.AudioTrackId? trackId) => (super.noSuchMethod(
            Invocation.method(
              #getVersionsByTrack,
              [trackId],
            ),
            returnValue: _i4
                .Future<_i2.Either<_i5.Failure, List<_i6.TrackVersion>>>.value(
                _FakeEither_0<_i5.Failure, List<_i6.TrackVersion>>(
              this,
              Invocation.method(
                #getVersionsByTrack,
                [trackId],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.TrackVersion>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.TrackVersion>> getById(
          _i7.TrackVersionId? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i6.TrackVersion>>.value(
                _FakeEither_0<_i5.Failure, _i6.TrackVersion>(
          this,
          Invocation.method(
            #getById,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.TrackVersion>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.TrackVersion>> getActiveVersion(
          _i7.AudioTrackId? trackId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getActiveVersion,
          [trackId],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i6.TrackVersion>>.value(
                _FakeEither_0<_i5.Failure, _i6.TrackVersion>(
          this,
          Invocation.method(
            #getActiveVersion,
            [trackId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.TrackVersion>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> setActiveVersion({
    required _i7.AudioTrackId? trackId,
    required _i7.TrackVersionId? versionId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setActiveVersion,
          [],
          {
            #trackId: trackId,
            #versionId: versionId,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #setActiveVersion,
            [],
            {
              #trackId: trackId,
              #versionId: versionId,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> deleteVersion(
          _i7.TrackVersionId? versionId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteVersion,
          [versionId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #deleteVersion,
            [versionId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> renameVersion({
    required _i7.TrackVersionId? versionId,
    required String? newLabel,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #renameVersion,
          [],
          {
            #versionId: versionId,
            #newLabel: newLabel,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #renameVersion,
            [],
            {
              #versionId: versionId,
              #newLabel: newLabel,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> clearCache() =>
      (super.noSuchMethod(
        Invocation.method(
          #clearCache,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #clearCache,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);
}

/// A class which mocks [WaveformRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockWaveformRepository extends _i1.Mock
    implements _i9.WaveformRepository {
  MockWaveformRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i10.AudioWaveform>>
      getWaveformByVersionId(_i7.TrackVersionId? versionId) =>
          (super.noSuchMethod(
            Invocation.method(
              #getWaveformByVersionId,
              [versionId],
            ),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, _i10.AudioWaveform>>.value(
                    _FakeEither_0<_i5.Failure, _i10.AudioWaveform>(
              this,
              Invocation.method(
                #getWaveformByVersionId,
                [versionId],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, _i10.AudioWaveform>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> deleteWaveformsForVersion(
    _i7.AudioTrackId? trackId,
    _i7.TrackVersionId? versionId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteWaveformsForVersion,
          [
            trackId,
            versionId,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #deleteWaveformsForVersion,
            [
              trackId,
              versionId,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);

  @override
  _i4.Stream<_i10.AudioWaveform> watchWaveformChanges(
          _i7.TrackVersionId? versionId) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchWaveformChanges,
          [versionId],
        ),
        returnValue: _i4.Stream<_i10.AudioWaveform>.empty(),
      ) as _i4.Stream<_i10.AudioWaveform>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> clearAllWaveforms() =>
      (super.noSuchMethod(
        Invocation.method(
          #clearAllWaveforms,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #clearAllWaveforms,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> storeCanonicalWaveform({
    required _i7.AudioTrackId? trackId,
    required _i10.AudioWaveform? waveform,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #storeCanonicalWaveform,
          [],
          {
            #trackId: trackId,
            #waveform: waveform,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #storeCanonicalWaveform,
            [],
            {
              #trackId: trackId,
              #waveform: waveform,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);
}

/// A class which mocks [AudioCommentRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioCommentRepository extends _i1.Mock
    implements _i11.AudioCommentRepository {
  MockAudioCommentRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i12.AudioComment>> getCommentById(
          _i7.AudioCommentId? commentId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCommentById,
          [commentId],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i12.AudioComment>>.value(
                _FakeEither_0<_i5.Failure, _i12.AudioComment>(
          this,
          Invocation.method(
            #getCommentById,
            [commentId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i12.AudioComment>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> addComment(
          _i12.AudioComment? comment) =>
      (super.noSuchMethod(
        Invocation.method(
          #addComment,
          [comment],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #addComment,
            [comment],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);

  @override
  _i4.Stream<_i2.Either<_i5.Failure, List<_i12.AudioComment>>>
      watchCommentsByTrack(_i7.AudioTrackId? trackId) => (super.noSuchMethod(
            Invocation.method(
              #watchCommentsByTrack,
              [trackId],
            ),
            returnValue: _i4.Stream<
                _i2.Either<_i5.Failure, List<_i12.AudioComment>>>.empty(),
          ) as _i4.Stream<_i2.Either<_i5.Failure, List<_i12.AudioComment>>>);

  @override
  _i4.Stream<_i2.Either<_i5.Failure, List<_i12.AudioComment>>>
      watchCommentsByVersion(_i7.TrackVersionId? versionId) =>
          (super.noSuchMethod(
            Invocation.method(
              #watchCommentsByVersion,
              [versionId],
            ),
            returnValue: _i4.Stream<
                _i2.Either<_i5.Failure, List<_i12.AudioComment>>>.empty(),
          ) as _i4.Stream<_i2.Either<_i5.Failure, List<_i12.AudioComment>>>);

  @override
  _i4.Stream<_i2.Either<_i5.Failure, List<_i12.AudioComment>>>
      watchRecentComments({
    required _i7.UserId? userId,
    required int? limit,
  }) =>
          (super.noSuchMethod(
            Invocation.method(
              #watchRecentComments,
              [],
              {
                #userId: userId,
                #limit: limit,
              },
            ),
            returnValue: _i4.Stream<
                _i2.Either<_i5.Failure, List<_i12.AudioComment>>>.empty(),
          ) as _i4.Stream<_i2.Either<_i5.Failure, List<_i12.AudioComment>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> deleteComment(
          _i7.AudioCommentId? commentId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteComment,
          [commentId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #deleteComment,
            [commentId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> deleteAllComments() =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteAllComments,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #deleteAllComments,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> deleteByTrackId(
          _i7.AudioTrackId? trackId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteByTrackId,
          [trackId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #deleteByTrackId,
            [trackId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> deleteCommentsByVersion(
          _i7.TrackVersionId? versionId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteCommentsByVersion,
          [versionId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #deleteCommentsByVersion,
            [versionId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);
}

/// A class which mocks [AudioStorageRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioStorageRepository extends _i1.Mock
    implements _i13.AudioStorageRepository {
  MockAudioStorageRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i14.CacheFailure, _i15.CachedAudio>> storeAudio(
    _i7.AudioTrackId? trackId,
    _i7.TrackVersionId? versionId,
    _i8.File? audioFile, {
    _i16.DirectoryType? directoryType = _i16.DirectoryType.audioCache,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #storeAudio,
          [
            trackId,
            versionId,
            audioFile,
          ],
          {#directoryType: directoryType},
        ),
        returnValue:
            _i4.Future<_i2.Either<_i14.CacheFailure, _i15.CachedAudio>>.value(
                _FakeEither_0<_i14.CacheFailure, _i15.CachedAudio>(
          this,
          Invocation.method(
            #storeAudio,
            [
              trackId,
              versionId,
              audioFile,
            ],
            {#directoryType: directoryType},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i14.CacheFailure, _i15.CachedAudio>>);

  @override
  _i4.Future<_i2.Either<_i14.CacheFailure, String>> getCachedAudioPath(
    _i7.AudioTrackId? trackId, {
    _i7.TrackVersionId? versionId,
    _i16.DirectoryType? directoryType = _i16.DirectoryType.audioCache,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedAudioPath,
          [trackId],
          {
            #versionId: versionId,
            #directoryType: directoryType,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i14.CacheFailure, String>>.value(
            _FakeEither_0<_i14.CacheFailure, String>(
          this,
          Invocation.method(
            #getCachedAudioPath,
            [trackId],
            {
              #versionId: versionId,
              #directoryType: directoryType,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i14.CacheFailure, String>>);

  @override
  _i4.Future<_i2.Either<_i14.CacheFailure, bool>> audioExists(
          _i7.AudioTrackId? trackId) =>
      (super.noSuchMethod(
        Invocation.method(
          #audioExists,
          [trackId],
        ),
        returnValue: _i4.Future<_i2.Either<_i14.CacheFailure, bool>>.value(
            _FakeEither_0<_i14.CacheFailure, bool>(
          this,
          Invocation.method(
            #audioExists,
            [trackId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i14.CacheFailure, bool>>);

  @override
  _i4.Future<_i2.Either<_i14.CacheFailure, bool>> audioVersionExists(
    _i7.AudioTrackId? trackId,
    _i7.TrackVersionId? versionId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #audioVersionExists,
          [
            trackId,
            versionId,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i14.CacheFailure, bool>>.value(
            _FakeEither_0<_i14.CacheFailure, bool>(
          this,
          Invocation.method(
            #audioVersionExists,
            [
              trackId,
              versionId,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i14.CacheFailure, bool>>);

  @override
  _i4.Future<_i2.Either<_i14.CacheFailure, _i15.CachedAudio?>> getCachedAudio(
          _i7.AudioTrackId? trackId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedAudio,
          [trackId],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i14.CacheFailure, _i15.CachedAudio?>>.value(
                _FakeEither_0<_i14.CacheFailure, _i15.CachedAudio?>(
          this,
          Invocation.method(
            #getCachedAudio,
            [trackId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i14.CacheFailure, _i15.CachedAudio?>>);

  @override
  _i4.Future<
      _i2.Either<_i14.CacheFailure, _i15.CachedAudio?>> getCachedAudioByVersion(
    _i7.AudioTrackId? trackId,
    _i7.TrackVersionId? versionId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedAudioByVersion,
          [
            trackId,
            versionId,
          ],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i14.CacheFailure, _i15.CachedAudio?>>.value(
                _FakeEither_0<_i14.CacheFailure, _i15.CachedAudio?>(
          this,
          Invocation.method(
            #getCachedAudioByVersion,
            [
              trackId,
              versionId,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i14.CacheFailure, _i15.CachedAudio?>>);

  @override
  _i4.Future<_i2.Either<_i14.CacheFailure, _i2.Unit>> deleteAudioFile(
          _i7.AudioTrackId? trackId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteAudioFile,
          [trackId],
        ),
        returnValue: _i4.Future<_i2.Either<_i14.CacheFailure, _i2.Unit>>.value(
            _FakeEither_0<_i14.CacheFailure, _i2.Unit>(
          this,
          Invocation.method(
            #deleteAudioFile,
            [trackId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i14.CacheFailure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i14.CacheFailure, _i2.Unit>> deleteAudioVersionFile(
    _i7.AudioTrackId? trackId,
    _i7.TrackVersionId? versionId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteAudioVersionFile,
          [
            trackId,
            versionId,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i14.CacheFailure, _i2.Unit>>.value(
            _FakeEither_0<_i14.CacheFailure, _i2.Unit>(
          this,
          Invocation.method(
            #deleteAudioVersionFile,
            [
              trackId,
              versionId,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i14.CacheFailure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i14.CacheFailure, int>> validateAndCleanCache() =>
      (super.noSuchMethod(
        Invocation.method(
          #validateAndCleanCache,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i14.CacheFailure, int>>.value(
            _FakeEither_0<_i14.CacheFailure, int>(
          this,
          Invocation.method(
            #validateAndCleanCache,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i14.CacheFailure, int>>);

  @override
  _i4.Stream<int> watchStorageUsage() => (super.noSuchMethod(
        Invocation.method(
          #watchStorageUsage,
          [],
        ),
        returnValue: _i4.Stream<int>.empty(),
      ) as _i4.Stream<int>);

  @override
  _i4.Future<_i2.Either<_i14.CacheFailure, int>> getStorageUsage() =>
      (super.noSuchMethod(
        Invocation.method(
          #getStorageUsage,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i14.CacheFailure, int>>.value(
            _FakeEither_0<_i14.CacheFailure, int>(
          this,
          Invocation.method(
            #getStorageUsage,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i14.CacheFailure, int>>);

  @override
  _i4.Future<_i2.Either<_i14.CacheFailure, int>> getAvailableStorage() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAvailableStorage,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i14.CacheFailure, int>>.value(
            _FakeEither_0<_i14.CacheFailure, int>(
          this,
          Invocation.method(
            #getAvailableStorage,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i14.CacheFailure, int>>);

  @override
  _i4.Stream<bool> watchTrackCacheStatus(
    _i7.AudioTrackId? trackId, {
    _i7.TrackVersionId? versionId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchTrackCacheStatus,
          [trackId],
          {#versionId: versionId},
        ),
        returnValue: _i4.Stream<bool>.empty(),
      ) as _i4.Stream<bool>);

  @override
  _i4.Stream<List<_i15.CachedAudio>> watchAllCachedAudios() =>
      (super.noSuchMethod(
        Invocation.method(
          #watchAllCachedAudios,
          [],
        ),
        returnValue: _i4.Stream<List<_i15.CachedAudio>>.empty(),
      ) as _i4.Stream<List<_i15.CachedAudio>>);
}
