// Mocks generated by Mockito 5.4.5 from annotations
// in trackflow/test/features/projects/data/repositories/sync_project_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:trackflow/core/entities/unique_id.dart' as _i6;
import 'package:trackflow/core/error/failures.dart' as _i8;
import 'package:trackflow/features/projects/data/datasources/project_local_data_source.dart'
    as _i3;
import 'package:trackflow/features/projects/data/datasources/project_remote_data_source.dart'
    as _i7;
import 'package:trackflow/features/projects/data/models/project_dto.dart'
    as _i5;
import 'package:trackflow/features/projects/domain/entities/project.dart'
    as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ProjectLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockProjectLocalDataSource extends _i1.Mock
    implements _i3.ProjectLocalDataSource {
  MockProjectLocalDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> cacheProject(_i5.ProjectDTO? project) => (super.noSuchMethod(
        Invocation.method(
          #cacheProject,
          [project],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<_i5.ProjectDTO?> getCachedProject(_i6.UniqueId? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedProject,
          [id],
        ),
        returnValue: _i4.Future<_i5.ProjectDTO?>.value(),
      ) as _i4.Future<_i5.ProjectDTO?>);

  @override
  _i4.Future<void> removeCachedProject(_i6.UniqueId? id) => (super.noSuchMethod(
        Invocation.method(
          #removeCachedProject,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i5.ProjectDTO>> getAllProjects() => (super.noSuchMethod(
        Invocation.method(
          #getAllProjects,
          [],
        ),
        returnValue: _i4.Future<List<_i5.ProjectDTO>>.value(<_i5.ProjectDTO>[]),
      ) as _i4.Future<List<_i5.ProjectDTO>>);

  @override
  _i4.Stream<List<_i5.ProjectDTO>> watchAllProjects() => (super.noSuchMethod(
        Invocation.method(
          #watchAllProjects,
          [],
        ),
        returnValue: _i4.Stream<List<_i5.ProjectDTO>>.empty(),
      ) as _i4.Stream<List<_i5.ProjectDTO>>);
}

/// A class which mocks [ProjectRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockProjectRemoteDataSource extends _i1.Mock
    implements _i7.ProjectRemoteDataSource {
  MockProjectRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i8.Failure, _i2.Unit>> createProject(
          _i9.Project? project) =>
      (super.noSuchMethod(
        Invocation.method(
          #createProject,
          [project],
        ),
        returnValue: _i4.Future<_i2.Either<_i8.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i8.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #createProject,
            [project],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i8.Failure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i8.Failure, _i2.Unit>> updateProject(
          _i9.Project? project) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProject,
          [project],
        ),
        returnValue: _i4.Future<_i2.Either<_i8.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i8.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #updateProject,
            [project],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i8.Failure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i8.Failure, _i2.Unit>> deleteProject(
          _i6.UniqueId? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteProject,
          [id],
        ),
        returnValue: _i4.Future<_i2.Either<_i8.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i8.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #deleteProject,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i8.Failure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i8.Failure, List<_i9.Project>>> getAllProjects() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAllProjects,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i8.Failure, List<_i9.Project>>>.value(
                _FakeEither_0<_i8.Failure, List<_i9.Project>>(
          this,
          Invocation.method(
            #getAllProjects,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i8.Failure, List<_i9.Project>>>);

  @override
  _i4.Future<_i2.Either<_i8.Failure, _i9.Project>> getProjectById(String? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProjectById,
          [id],
        ),
        returnValue: _i4.Future<_i2.Either<_i8.Failure, _i9.Project>>.value(
            _FakeEither_0<_i8.Failure, _i9.Project>(
          this,
          Invocation.method(
            #getProjectById,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i8.Failure, _i9.Project>>);
}
