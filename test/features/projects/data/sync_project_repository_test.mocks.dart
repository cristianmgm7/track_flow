// Mocks generated by Mockito 5.4.5 from annotations
// in trackflow/test/features/projects/data/sync_project_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:connectivity_plus/connectivity_plus.dart' as _i10;
import 'package:connectivity_plus_platform_interface/connectivity_plus_platform_interface.dart'
    as _i11;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:trackflow/core/entities/unique_id.dart' as _i6;
import 'package:trackflow/core/error/failures.dart' as _i8;
import 'package:trackflow/features/projects/data/datasources/project_local_data_source.dart'
    as _i3;
import 'package:trackflow/features/projects/data/datasources/project_remote_data_source.dart'
    as _i7;
import 'package:trackflow/features/projects/data/models/project_dto.dart'
    as _i5;
import 'package:trackflow/features/projects/domain/entities/project.dart'
    as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [ProjectLocalDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockProjectLocalDataSource extends _i1.Mock
    implements _i3.ProjectsLocalDataSource {
  @override
  _i4.Future<void> cacheProject(_i5.ProjectDTO? project) =>
      (super.noSuchMethod(
            Invocation.method(#cacheProject, [project]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<_i5.ProjectDTO?> getCachedProject(_i6.UniqueId? id) =>
      (super.noSuchMethod(
            Invocation.method(#getCachedProject, [id]),
            returnValue: _i4.Future<_i5.ProjectDTO?>.value(),
            returnValueForMissingStub: _i4.Future<_i5.ProjectDTO?>.value(),
          )
          as _i4.Future<_i5.ProjectDTO?>);

  @override
  _i4.Future<void> removeCachedProject(_i6.UniqueId? id) =>
      (super.noSuchMethod(
            Invocation.method(#removeCachedProject, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [ProjectRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockProjectRemoteDataSource extends _i1.Mock
    implements _i7.ProjectRemoteDataSource {
  @override
  _i4.Future<_i2.Either<_i8.Failure, _i2.Unit>> createProject(
    _i9.Project? project,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#createProject, [project]),
            returnValue: _i4.Future<_i2.Either<_i8.Failure, _i2.Unit>>.value(
              _FakeEither_0<_i8.Failure, _i2.Unit>(
                this,
                Invocation.method(#createProject, [project]),
              ),
            ),
            returnValueForMissingStub:
                _i4.Future<_i2.Either<_i8.Failure, _i2.Unit>>.value(
                  _FakeEither_0<_i8.Failure, _i2.Unit>(
                    this,
                    Invocation.method(#createProject, [project]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i8.Failure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i8.Failure, _i2.Unit>> updateProject(
    _i9.Project? project,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#updateProject, [project]),
            returnValue: _i4.Future<_i2.Either<_i8.Failure, _i2.Unit>>.value(
              _FakeEither_0<_i8.Failure, _i2.Unit>(
                this,
                Invocation.method(#updateProject, [project]),
              ),
            ),
            returnValueForMissingStub:
                _i4.Future<_i2.Either<_i8.Failure, _i2.Unit>>.value(
                  _FakeEither_0<_i8.Failure, _i2.Unit>(
                    this,
                    Invocation.method(#updateProject, [project]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i8.Failure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i8.Failure, _i2.Unit>> deleteProject(
    _i6.UniqueId? id,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#deleteProject, [id]),
            returnValue: _i4.Future<_i2.Either<_i8.Failure, _i2.Unit>>.value(
              _FakeEither_0<_i8.Failure, _i2.Unit>(
                this,
                Invocation.method(#deleteProject, [id]),
              ),
            ),
            returnValueForMissingStub:
                _i4.Future<_i2.Either<_i8.Failure, _i2.Unit>>.value(
                  _FakeEither_0<_i8.Failure, _i2.Unit>(
                    this,
                    Invocation.method(#deleteProject, [id]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<_i8.Failure, _i2.Unit>>);
}

/// A class which mocks [Connectivity].
///
/// See the documentation for Mockito's code generation for more information.
class MockConnectivity extends _i1.Mock implements _i10.Connectivity {
  @override
  _i4.Stream<_i11.ConnectivityResult> get onConnectivityChanged =>
      (super.noSuchMethod(
            Invocation.getter(#onConnectivityChanged),
            returnValue: _i4.Stream<_i11.ConnectivityResult>.empty(),
            returnValueForMissingStub:
                _i4.Stream<_i11.ConnectivityResult>.empty(),
          )
          as _i4.Stream<_i11.ConnectivityResult>);

  @override
  _i4.Future<_i11.ConnectivityResult> checkConnectivity() =>
      (super.noSuchMethod(
            Invocation.method(#checkConnectivity, []),
            returnValue: _i4.Future<_i11.ConnectivityResult>.value(
              _i11.ConnectivityResult.bluetooth,
            ),
            returnValueForMissingStub:
                _i4.Future<_i11.ConnectivityResult>.value(
                  _i11.ConnectivityResult.bluetooth,
                ),
          )
          as _i4.Future<_i11.ConnectivityResult>);
}
