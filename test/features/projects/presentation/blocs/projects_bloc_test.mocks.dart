// Mocks generated by Mockito 5.4.5 from annotations
// in trackflow/test/features/projects/presentation/blocs/projects_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:trackflow/core/error/failures.dart' as _i5;
import 'package:trackflow/features/projects/domain/entities/project.dart'
    as _i6;
import 'package:trackflow/features/projects/domain/usecases/create_project_usecase.dart'
    as _i3;
import 'package:trackflow/features/projects/domain/usecases/delete_project_usecase.dart'
    as _i8;
import 'package:trackflow/features/projects/domain/usecases/get_project_by_id_usecase.dart'
    as _i10;
import 'package:trackflow/features/projects/domain/usecases/get_user_projects_usecase.dart'
    as _i9;
import 'package:trackflow/features/projects/domain/usecases/update_project_usecase.dart'
    as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CreateProjectUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateProjectUseCase extends _i1.Mock
    implements _i3.CreateProjectUseCase {
  MockCreateProjectUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Project>> call(_i6.Project? project) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [project],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Project>>.value(
            _FakeEither_0<_i5.Failure, _i6.Project>(
          this,
          Invocation.method(
            #call,
            [project],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Project>>);
}

/// A class which mocks [UpdateProjectUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockUpdateProjectUseCase extends _i1.Mock
    implements _i7.UpdateProjectUseCase {
  MockUpdateProjectUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Project>> call(_i6.Project? project) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [project],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Project>>.value(
            _FakeEither_0<_i5.Failure, _i6.Project>(
          this,
          Invocation.method(
            #call,
            [project],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Project>>);
}

/// A class which mocks [DeleteProjectUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteProjectUseCase extends _i1.Mock
    implements _i8.DeleteProjectUseCase {
  MockDeleteProjectUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> call({
    required String? projectId,
    required String? userId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {
            #projectId: projectId,
            #userId: userId,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #call,
            [],
            {
              #projectId: projectId,
              #userId: userId,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);
}

/// A class which mocks [GetUserProjectsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetUserProjectsUseCase extends _i1.Mock
    implements _i9.GetUserProjectsUseCase {
  MockGetUserProjectsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Either<_i5.Failure, _i4.Stream<List<_i6.Project>>> call(String? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [userId],
        ),
        returnValue: _FakeEither_0<_i5.Failure, _i4.Stream<List<_i6.Project>>>(
          this,
          Invocation.method(
            #call,
            [userId],
          ),
        ),
      ) as _i2.Either<_i5.Failure, _i4.Stream<List<_i6.Project>>>);

  @override
  _i2.Either<_i5.Failure, _i4.Stream<List<_i6.Project>>> getByStatus(
    String? userId,
    String? status,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getByStatus,
          [
            userId,
            status,
          ],
        ),
        returnValue: _FakeEither_0<_i5.Failure, _i4.Stream<List<_i6.Project>>>(
          this,
          Invocation.method(
            #getByStatus,
            [
              userId,
              status,
            ],
          ),
        ),
      ) as _i2.Either<_i5.Failure, _i4.Stream<List<_i6.Project>>>);
}

/// A class which mocks [GetProjectByIdUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetProjectByIdUseCase extends _i1.Mock
    implements _i10.GetProjectByIdUseCase {
  MockGetProjectByIdUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Project>> call(String? projectId) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [projectId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Project>>.value(
            _FakeEither_0<_i5.Failure, _i6.Project>(
          this,
          Invocation.method(
            #call,
            [projectId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Project>>);
}
