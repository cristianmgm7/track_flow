// Mocks generated by Mockito 5.4.4 from annotations
// in trackflow/test/features/projects/domain/usecases/upload_cover_art_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:io' as _i9;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i11;
import 'package:trackflow/core/entities/unique_id.dart' as _i7;
import 'package:trackflow/core/error/failures.dart' as _i5;
import 'package:trackflow/core/infrastructure/domain/directory_service.dart'
    as _i10;
import 'package:trackflow/core/storage/domain/image_storage_repository.dart'
    as _i8;
import 'package:trackflow/features/projects/domain/entities/project.dart'
    as _i6;
import 'package:trackflow/features/projects/domain/repositories/projects_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ProjectsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockProjectsRepository extends _i1.Mock
    implements _i3.ProjectsRepository {
  MockProjectsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Project>> createProject(
          _i6.Project? project) =>
      (super.noSuchMethod(
        Invocation.method(
          #createProject,
          [project],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Project>>.value(
            _FakeEither_0<_i5.Failure, _i6.Project>(
          this,
          Invocation.method(
            #createProject,
            [project],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Project>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> updateProject(
          _i6.Project? project) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProject,
          [project],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #updateProject,
            [project],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> deleteProject(
          _i6.Project? project) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteProject,
          [project],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #deleteProject,
            [project],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.Project>> getProjectById(
          _i7.ProjectId? projectId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProjectById,
          [projectId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i6.Project>>.value(
            _FakeEither_0<_i5.Failure, _i6.Project>(
          this,
          Invocation.method(
            #getProjectById,
            [projectId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.Project>>);

  @override
  _i4.Stream<_i2.Either<_i5.Failure, List<_i6.Project>>> watchLocalProjects(
          _i7.UserId? ownerId) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchLocalProjects,
          [ownerId],
        ),
        returnValue:
            _i4.Stream<_i2.Either<_i5.Failure, List<_i6.Project>>>.empty(),
      ) as _i4.Stream<_i2.Either<_i5.Failure, List<_i6.Project>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> clearLocalCache() =>
      (super.noSuchMethod(
        Invocation.method(
          #clearLocalCache,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #clearLocalCache,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);

  @override
  _i4.Stream<_i2.Either<_i5.Failure, _i6.Project?>> watchProjectById(
          _i7.ProjectId? projectId) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchProjectById,
          [projectId],
        ),
        returnValue: _i4.Stream<_i2.Either<_i5.Failure, _i6.Project?>>.empty(),
      ) as _i4.Stream<_i2.Either<_i5.Failure, _i6.Project?>>);
}

/// A class which mocks [ImageStorageRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockImageStorageRepository extends _i1.Mock
    implements _i8.ImageStorageRepository {
  MockImageStorageRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, String>> uploadImage({
    required _i9.File? imageFile,
    required String? storagePath,
    Map<String, String>? metadata,
    int? quality = 85,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadImage,
          [],
          {
            #imageFile: imageFile,
            #storagePath: storagePath,
            #metadata: metadata,
            #quality: quality,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, String>>.value(
            _FakeEither_0<_i5.Failure, String>(
          this,
          Invocation.method(
            #uploadImage,
            [],
            {
              #imageFile: imageFile,
              #storagePath: storagePath,
              #metadata: metadata,
              #quality: quality,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, String>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, String>> downloadImage({
    required String? storageUrl,
    required String? localPath,
    String? entityId,
    String? entityType,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #downloadImage,
          [],
          {
            #storageUrl: storageUrl,
            #localPath: localPath,
            #entityId: entityId,
            #entityType: entityType,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, String>>.value(
            _FakeEither_0<_i5.Failure, String>(
          this,
          Invocation.method(
            #downloadImage,
            [],
            {
              #storageUrl: storageUrl,
              #localPath: localPath,
              #entityId: entityId,
              #entityType: entityType,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, String>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> isImageCached({
    required String? entityId,
    required String? entityType,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #isImageCached,
          [],
          {
            #entityId: entityId,
            #entityType: entityType,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, bool>>.value(
            _FakeEither_0<_i5.Failure, bool>(
          this,
          Invocation.method(
            #isImageCached,
            [],
            {
              #entityId: entityId,
              #entityType: entityType,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, bool>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, String?>> getCachedImagePath({
    required String? entityId,
    required String? entityType,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedImagePath,
          [],
          {
            #entityId: entityId,
            #entityType: entityType,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, String?>>.value(
            _FakeEither_0<_i5.Failure, String?>(
          this,
          Invocation.method(
            #getCachedImagePath,
            [],
            {
              #entityId: entityId,
              #entityType: entityType,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, String?>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> deleteImage(
          {required String? storageUrl}) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteImage,
          [],
          {#storageUrl: storageUrl},
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #deleteImage,
            [],
            {#storageUrl: storageUrl},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>> clearCache({
    required String? entityId,
    required String? entityType,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #clearCache,
          [],
          {
            #entityId: entityId,
            #entityType: entityType,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i5.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #clearCache,
            [],
            {
              #entityId: entityId,
              #entityType: entityType,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i2.Unit>>);
}

/// A class which mocks [DirectoryService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDirectoryService extends _i1.Mock implements _i10.DirectoryService {
  MockDirectoryService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i9.Directory>> getDirectory(
          _i10.DirectoryType? type) =>
      (super.noSuchMethod(
        Invocation.method(
          #getDirectory,
          [type],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i9.Directory>>.value(
            _FakeEither_0<_i5.Failure, _i9.Directory>(
          this,
          Invocation.method(
            #getDirectory,
            [type],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i9.Directory>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i9.Directory>> getSubdirectory(
    _i10.DirectoryType? type,
    String? subPath,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getSubdirectory,
          [
            type,
            subPath,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i9.Directory>>.value(
            _FakeEither_0<_i5.Failure, _i9.Directory>(
          this,
          Invocation.method(
            #getSubdirectory,
            [
              type,
              subPath,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i9.Directory>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i9.Directory>> ensureDirectoryExists(
          String? path) =>
      (super.noSuchMethod(
        Invocation.method(
          #ensureDirectoryExists,
          [path],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, _i9.Directory>>.value(
            _FakeEither_0<_i5.Failure, _i9.Directory>(
          this,
          Invocation.method(
            #ensureDirectoryExists,
            [path],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i9.Directory>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, String>> getFilePath(
    _i10.DirectoryType? type,
    String? relativePath,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFilePath,
          [
            type,
            relativePath,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, String>>.value(
            _FakeEither_0<_i5.Failure, String>(
          this,
          Invocation.method(
            #getFilePath,
            [
              type,
              relativePath,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, String>>);

  @override
  String getRelativePath(
    String? absolutePath,
    _i10.DirectoryType? type,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRelativePath,
          [
            absolutePath,
            type,
          ],
        ),
        returnValue: _i11.dummyValue<String>(
          this,
          Invocation.method(
            #getRelativePath,
            [
              absolutePath,
              type,
            ],
          ),
        ),
      ) as String);

  @override
  _i4.Future<_i2.Either<_i5.Failure, String>> getAbsolutePath(
    String? relativePath,
    _i10.DirectoryType? type,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getAbsolutePath,
          [
            relativePath,
            type,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, String>>.value(
            _FakeEither_0<_i5.Failure, String>(
          this,
          Invocation.method(
            #getAbsolutePath,
            [
              relativePath,
              type,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, String>>);
}
