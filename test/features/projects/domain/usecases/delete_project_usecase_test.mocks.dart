// Mocks generated by Mockito 5.4.4 from annotations
// in trackflow/test/features/projects/domain/usecases/delete_project_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i11;
import 'dart:io' as _i15;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:trackflow/core/app_flow/data/session_storage.dart' as _i4;
import 'package:trackflow/core/entities/unique_id.dart' as _i14;
import 'package:trackflow/core/error/failures.dart' as _i12;
import 'package:trackflow/features/audio_cache/domain/repositories/audio_storage_repository.dart'
    as _i9;
import 'package:trackflow/features/audio_comment/domain/repositories/audio_comment_repository.dart'
    as _i10;
import 'package:trackflow/features/audio_track/domain/entities/audio_track.dart'
    as _i16;
import 'package:trackflow/features/audio_track/domain/repositories/audio_track_repository.dart'
    as _i3;
import 'package:trackflow/features/audio_track/domain/services/project_track_service.dart'
    as _i6;
import 'package:trackflow/features/audio_track/domain/usecases/delete_audio_track_usecase.dart'
    as _i17;
import 'package:trackflow/features/projects/domain/entities/project.dart'
    as _i13;
import 'package:trackflow/features/projects/domain/repositories/projects_repository.dart'
    as _i5;
import 'package:trackflow/features/track_version/domain/repositories/track_version_repository.dart'
    as _i7;
import 'package:trackflow/features/waveform/domain/repositories/waveform_repository.dart'
    as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAudioTrackRepository_1 extends _i1.SmartFake
    implements _i3.AudioTrackRepository {
  _FakeAudioTrackRepository_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSessionStorage_2 extends _i1.SmartFake
    implements _i4.SessionStorage {
  _FakeSessionStorage_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProjectsRepository_3 extends _i1.SmartFake
    implements _i5.ProjectsRepository {
  _FakeProjectsRepository_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeProjectTrackService_4 extends _i1.SmartFake
    implements _i6.ProjectTrackService {
  _FakeProjectTrackService_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeTrackVersionRepository_5 extends _i1.SmartFake
    implements _i7.TrackVersionRepository {
  _FakeTrackVersionRepository_5(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeWaveformRepository_6 extends _i1.SmartFake
    implements _i8.WaveformRepository {
  _FakeWaveformRepository_6(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAudioStorageRepository_7 extends _i1.SmartFake
    implements _i9.AudioStorageRepository {
  _FakeAudioStorageRepository_7(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeAudioCommentRepository_8 extends _i1.SmartFake
    implements _i10.AudioCommentRepository {
  _FakeAudioCommentRepository_8(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SessionStorage].
///
/// See the documentation for Mockito's code generation for more information.
class MockSessionStorage extends _i1.Mock implements _i4.SessionStorage {
  MockSessionStorage() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<void> saveUserId(String? userId) => (super.noSuchMethod(
        Invocation.method(
          #saveUserId,
          [userId],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<String?> getUserId() => (super.noSuchMethod(
        Invocation.method(
          #getUserId,
          [],
        ),
        returnValue: _i11.Future<String?>.value(),
      ) as _i11.Future<String?>);

  @override
  _i11.Future<void> clearUserId() => (super.noSuchMethod(
        Invocation.method(
          #clearUserId,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<void> clearAll() => (super.noSuchMethod(
        Invocation.method(
          #clearAll,
          [],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  void debugPrintAllValues() => super.noSuchMethod(
        Invocation.method(
          #debugPrintAllValues,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i11.Future<void> setBool(
    String? key,
    bool? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setBool,
          [
            key,
            value,
          ],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<void> setString(
    String? key,
    String? value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setString,
          [
            key,
            value,
          ],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);

  @override
  _i11.Future<String?> getString(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getString,
          [key],
        ),
        returnValue: _i11.Future<String?>.value(),
      ) as _i11.Future<String?>);

  @override
  _i11.Future<bool?> getBool(String? key) => (super.noSuchMethod(
        Invocation.method(
          #getBool,
          [key],
        ),
        returnValue: _i11.Future<bool?>.value(),
      ) as _i11.Future<bool?>);

  @override
  _i11.Future<void> remove(String? key) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [key],
        ),
        returnValue: _i11.Future<void>.value(),
        returnValueForMissingStub: _i11.Future<void>.value(),
      ) as _i11.Future<void>);
}

/// A class which mocks [ProjectsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockProjectsRepository extends _i1.Mock
    implements _i5.ProjectsRepository {
  MockProjectsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i11.Future<_i2.Either<_i12.Failure, _i13.Project>> createProject(
          _i13.Project? project) =>
      (super.noSuchMethod(
        Invocation.method(
          #createProject,
          [project],
        ),
        returnValue: _i11.Future<_i2.Either<_i12.Failure, _i13.Project>>.value(
            _FakeEither_0<_i12.Failure, _i13.Project>(
          this,
          Invocation.method(
            #createProject,
            [project],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, _i13.Project>>);

  @override
  _i11.Future<_i2.Either<_i12.Failure, _i2.Unit>> updateProject(
          _i13.Project? project) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProject,
          [project],
        ),
        returnValue: _i11.Future<_i2.Either<_i12.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i12.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #updateProject,
            [project],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, _i2.Unit>>);

  @override
  _i11.Future<_i2.Either<_i12.Failure, _i2.Unit>> deleteProject(
          _i13.Project? project) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteProject,
          [project],
        ),
        returnValue: _i11.Future<_i2.Either<_i12.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i12.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #deleteProject,
            [project],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, _i2.Unit>>);

  @override
  _i11.Future<_i2.Either<_i12.Failure, _i13.Project>> getProjectById(
          _i14.ProjectId? projectId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProjectById,
          [projectId],
        ),
        returnValue: _i11.Future<_i2.Either<_i12.Failure, _i13.Project>>.value(
            _FakeEither_0<_i12.Failure, _i13.Project>(
          this,
          Invocation.method(
            #getProjectById,
            [projectId],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, _i13.Project>>);

  @override
  _i11.Stream<_i2.Either<_i12.Failure, List<_i13.Project>>> watchLocalProjects(
          _i14.UserId? ownerId) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchLocalProjects,
          [ownerId],
        ),
        returnValue:
            _i11.Stream<_i2.Either<_i12.Failure, List<_i13.Project>>>.empty(),
      ) as _i11.Stream<_i2.Either<_i12.Failure, List<_i13.Project>>>);

  @override
  _i11.Future<_i2.Either<_i12.Failure, _i2.Unit>> clearLocalCache() =>
      (super.noSuchMethod(
        Invocation.method(
          #clearLocalCache,
          [],
        ),
        returnValue: _i11.Future<_i2.Either<_i12.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i12.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #clearLocalCache,
            [],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, _i2.Unit>>);

  @override
  _i11.Stream<_i2.Either<_i12.Failure, _i13.Project?>> watchProjectById(
          _i14.ProjectId? projectId) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchProjectById,
          [projectId],
        ),
        returnValue:
            _i11.Stream<_i2.Either<_i12.Failure, _i13.Project?>>.empty(),
      ) as _i11.Stream<_i2.Either<_i12.Failure, _i13.Project?>>);

  @override
  _i11.Future<_i2.Either<_i12.Failure, String>> uploadCoverArt(
    _i14.ProjectId? projectId,
    _i15.File? imageFile,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #uploadCoverArt,
          [
            projectId,
            imageFile,
          ],
        ),
        returnValue: _i11.Future<_i2.Either<_i12.Failure, String>>.value(
            _FakeEither_0<_i12.Failure, String>(
          this,
          Invocation.method(
            #uploadCoverArt,
            [
              projectId,
              imageFile,
            ],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, String>>);
}

/// A class which mocks [ProjectTrackService].
///
/// See the documentation for Mockito's code generation for more information.
class MockProjectTrackService extends _i1.Mock
    implements _i6.ProjectTrackService {
  MockProjectTrackService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.AudioTrackRepository get trackRepository => (super.noSuchMethod(
        Invocation.getter(#trackRepository),
        returnValue: _FakeAudioTrackRepository_1(
          this,
          Invocation.getter(#trackRepository),
        ),
      ) as _i3.AudioTrackRepository);

  @override
  _i11.Stream<_i2.Either<_i12.Failure, List<_i16.AudioTrack>>>
      watchTracksByProject(_i14.ProjectId? projectId) => (super.noSuchMethod(
            Invocation.method(
              #watchTracksByProject,
              [projectId],
            ),
            returnValue: _i11.Stream<
                _i2.Either<_i12.Failure, List<_i16.AudioTrack>>>.empty(),
          ) as _i11.Stream<_i2.Either<_i12.Failure, List<_i16.AudioTrack>>>);

  @override
  _i11.Future<_i2.Either<_i12.Failure, _i16.AudioTrack>> addTrackToProject({
    required _i13.Project? project,
    required _i14.UserId? requester,
    required String? name,
    required String? url,
    Duration? duration,
    _i14.TrackVersionId? activeVersionId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addTrackToProject,
          [],
          {
            #project: project,
            #requester: requester,
            #name: name,
            #url: url,
            #duration: duration,
            #activeVersionId: activeVersionId,
          },
        ),
        returnValue:
            _i11.Future<_i2.Either<_i12.Failure, _i16.AudioTrack>>.value(
                _FakeEither_0<_i12.Failure, _i16.AudioTrack>(
          this,
          Invocation.method(
            #addTrackToProject,
            [],
            {
              #project: project,
              #requester: requester,
              #name: name,
              #url: url,
              #duration: duration,
              #activeVersionId: activeVersionId,
            },
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, _i16.AudioTrack>>);

  @override
  _i11.Future<_i2.Either<_i12.Failure, _i2.Unit>> deleteTrack({
    required _i13.Project? project,
    required _i14.UserId? requester,
    required _i14.AudioTrackId? trackId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTrack,
          [],
          {
            #project: project,
            #requester: requester,
            #trackId: trackId,
          },
        ),
        returnValue: _i11.Future<_i2.Either<_i12.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i12.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #deleteTrack,
            [],
            {
              #project: project,
              #requester: requester,
              #trackId: trackId,
            },
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, _i2.Unit>>);

  @override
  _i11.Future<_i2.Either<_i12.Failure, _i2.Unit>> editTrackName({
    required _i14.AudioTrackId? trackId,
    required _i14.ProjectId? projectId,
    required String? newName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #editTrackName,
          [],
          {
            #trackId: trackId,
            #projectId: projectId,
            #newName: newName,
          },
        ),
        returnValue: _i11.Future<_i2.Either<_i12.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i12.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #editTrackName,
            [],
            {
              #trackId: trackId,
              #projectId: projectId,
              #newName: newName,
            },
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, _i2.Unit>>);
}

/// A class which mocks [DeleteAudioTrack].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeleteAudioTrack extends _i1.Mock implements _i17.DeleteAudioTrack {
  MockDeleteAudioTrack() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.SessionStorage get sessionStorage => (super.noSuchMethod(
        Invocation.getter(#sessionStorage),
        returnValue: _FakeSessionStorage_2(
          this,
          Invocation.getter(#sessionStorage),
        ),
      ) as _i4.SessionStorage);

  @override
  _i5.ProjectsRepository get projectDetailRepository => (super.noSuchMethod(
        Invocation.getter(#projectDetailRepository),
        returnValue: _FakeProjectsRepository_3(
          this,
          Invocation.getter(#projectDetailRepository),
        ),
      ) as _i5.ProjectsRepository);

  @override
  _i6.ProjectTrackService get projectTrackService => (super.noSuchMethod(
        Invocation.getter(#projectTrackService),
        returnValue: _FakeProjectTrackService_4(
          this,
          Invocation.getter(#projectTrackService),
        ),
      ) as _i6.ProjectTrackService);

  @override
  _i7.TrackVersionRepository get trackVersionRepository => (super.noSuchMethod(
        Invocation.getter(#trackVersionRepository),
        returnValue: _FakeTrackVersionRepository_5(
          this,
          Invocation.getter(#trackVersionRepository),
        ),
      ) as _i7.TrackVersionRepository);

  @override
  _i8.WaveformRepository get waveformRepository => (super.noSuchMethod(
        Invocation.getter(#waveformRepository),
        returnValue: _FakeWaveformRepository_6(
          this,
          Invocation.getter(#waveformRepository),
        ),
      ) as _i8.WaveformRepository);

  @override
  _i9.AudioStorageRepository get audioStorageRepository => (super.noSuchMethod(
        Invocation.getter(#audioStorageRepository),
        returnValue: _FakeAudioStorageRepository_7(
          this,
          Invocation.getter(#audioStorageRepository),
        ),
      ) as _i9.AudioStorageRepository);

  @override
  _i10.AudioCommentRepository get audioCommentRepository => (super.noSuchMethod(
        Invocation.getter(#audioCommentRepository),
        returnValue: _FakeAudioCommentRepository_8(
          this,
          Invocation.getter(#audioCommentRepository),
        ),
      ) as _i10.AudioCommentRepository);

  @override
  _i11.Future<_i2.Either<_i12.Failure, _i2.Unit>> call(
          _i17.DeleteAudioTrackParams? params) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [params],
        ),
        returnValue: _i11.Future<_i2.Either<_i12.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i12.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #call,
            [params],
          ),
        )),
      ) as _i11.Future<_i2.Either<_i12.Failure, _i2.Unit>>);
}
