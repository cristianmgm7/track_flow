// Mocks generated by Mockito 5.4.4 from annotations
// in trackflow/test/features/audio_cache/domain/usecases/cache_track_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:trackflow/features/audio_cache/shared/domain/entities/cache_reference.dart'
    as _i8;
import 'package:trackflow/features/audio_cache/shared/domain/entities/cached_audio.dart'
    as _i7;
import 'package:trackflow/features/audio_cache/shared/domain/entities/download_progress.dart'
    as _i9;
import 'package:trackflow/features/audio_cache/shared/domain/failures/cache_failure.dart'
    as _i5;
import 'package:trackflow/features/audio_cache/shared/domain/services/cache_orchestration_service.dart'
    as _i3;
import 'package:trackflow/features/audio_cache/shared/domain/value_objects/conflict_policy.dart'
    as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CacheOrchestrationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCacheOrchestrationService extends _i1.Mock
    implements _i3.CacheOrchestrationService {
  MockCacheOrchestrationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.CacheFailure, _i2.Unit>> cacheAudio(
    String? trackId,
    String? audioUrl,
    String? referenceId, {
    _i6.ConflictPolicy? policy = _i6.ConflictPolicy.lastWins,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheAudio,
          [
            trackId,
            audioUrl,
            referenceId,
          ],
          {#policy: policy},
        ),
        returnValue: _i4.Future<_i2.Either<_i5.CacheFailure, _i2.Unit>>.value(
            _FakeEither_0<_i5.CacheFailure, _i2.Unit>(
          this,
          Invocation.method(
            #cacheAudio,
            [
              trackId,
              audioUrl,
              referenceId,
            ],
            {#policy: policy},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.CacheFailure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i5.CacheFailure, String>> getCachedAudioPath(
          String? trackId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedAudioPath,
          [trackId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.CacheFailure, String>>.value(
            _FakeEither_0<_i5.CacheFailure, String>(
          this,
          Invocation.method(
            #getCachedAudioPath,
            [trackId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.CacheFailure, String>>);

  @override
  _i4.Future<_i2.Either<_i5.CacheFailure, _i2.Unit>> removeFromCache(
    String? trackId,
    String? referenceId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeFromCache,
          [
            trackId,
            referenceId,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.CacheFailure, _i2.Unit>>.value(
            _FakeEither_0<_i5.CacheFailure, _i2.Unit>(
          this,
          Invocation.method(
            #removeFromCache,
            [
              trackId,
              referenceId,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.CacheFailure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i5.CacheFailure, _i7.CacheStatus>> getCacheStatus(
          String? trackId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCacheStatus,
          [trackId],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.CacheFailure, _i7.CacheStatus>>.value(
                _FakeEither_0<_i5.CacheFailure, _i7.CacheStatus>(
          this,
          Invocation.method(
            #getCacheStatus,
            [trackId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.CacheFailure, _i7.CacheStatus>>);

  @override
  _i4.Future<
      _i2.Either<_i5.CacheFailure, _i8.CacheReference?>> getCacheReference(
          String? trackId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCacheReference,
          [trackId],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.CacheFailure, _i8.CacheReference?>>.value(
                _FakeEither_0<_i5.CacheFailure, _i8.CacheReference?>(
          this,
          Invocation.method(
            #getCacheReference,
            [trackId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.CacheFailure, _i8.CacheReference?>>);

  @override
  _i4.Stream<_i9.DownloadProgress> watchDownloadProgress(String? trackId) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchDownloadProgress,
          [trackId],
        ),
        returnValue: _i4.Stream<_i9.DownloadProgress>.empty(),
      ) as _i4.Stream<_i9.DownloadProgress>);

  @override
  _i4.Stream<_i7.CacheStatus> watchCacheStatus(String? trackId) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchCacheStatus,
          [trackId],
        ),
        returnValue: _i4.Stream<_i7.CacheStatus>.empty(),
      ) as _i4.Stream<_i7.CacheStatus>);

  @override
  _i4.Stream<List<_i9.DownloadProgress>> watchActiveDownloads() =>
      (super.noSuchMethod(
        Invocation.method(
          #watchActiveDownloads,
          [],
        ),
        returnValue: _i4.Stream<List<_i9.DownloadProgress>>.empty(),
      ) as _i4.Stream<List<_i9.DownloadProgress>>);

  @override
  _i4.Future<_i2.Either<_i5.CacheFailure, _i2.Unit>> cacheMultipleAudios(
    Map<String, String>? trackUrlPairs,
    String? referenceId, {
    _i6.ConflictPolicy? policy = _i6.ConflictPolicy.lastWins,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheMultipleAudios,
          [
            trackUrlPairs,
            referenceId,
          ],
          {#policy: policy},
        ),
        returnValue: _i4.Future<_i2.Either<_i5.CacheFailure, _i2.Unit>>.value(
            _FakeEither_0<_i5.CacheFailure, _i2.Unit>(
          this,
          Invocation.method(
            #cacheMultipleAudios,
            [
              trackUrlPairs,
              referenceId,
            ],
            {#policy: policy},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.CacheFailure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i5.CacheFailure, _i2.Unit>> removeMultipleFromCache(
    List<String>? trackIds,
    String? referenceId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeMultipleFromCache,
          [
            trackIds,
            referenceId,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.CacheFailure, _i2.Unit>>.value(
            _FakeEither_0<_i5.CacheFailure, _i2.Unit>(
          this,
          Invocation.method(
            #removeMultipleFromCache,
            [
              trackIds,
              referenceId,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.CacheFailure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i5.CacheFailure, Map<String, _i7.CacheStatus>>>
      getMultipleCacheStatus(List<String>? trackIds) => (super.noSuchMethod(
            Invocation.method(
              #getMultipleCacheStatus,
              [trackIds],
            ),
            returnValue: _i4.Future<
                    _i2.Either<_i5.CacheFailure,
                        Map<String, _i7.CacheStatus>>>.value(
                _FakeEither_0<_i5.CacheFailure, Map<String, _i7.CacheStatus>>(
              this,
              Invocation.method(
                #getMultipleCacheStatus,
                [trackIds],
              ),
            )),
          ) as _i4.Future<
              _i2.Either<_i5.CacheFailure, Map<String, _i7.CacheStatus>>>);

  @override
  _i4.Future<_i2.Either<_i5.CacheFailure, List<_i7.CachedAudio>>>
      getAllCachedAudios() => (super.noSuchMethod(
            Invocation.method(
              #getAllCachedAudios,
              [],
            ),
            returnValue: _i4.Future<
                    _i2.Either<_i5.CacheFailure, List<_i7.CachedAudio>>>.value(
                _FakeEither_0<_i5.CacheFailure, List<_i7.CachedAudio>>(
              this,
              Invocation.method(
                #getAllCachedAudios,
                [],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.CacheFailure, List<_i7.CachedAudio>>>);

  @override
  _i4.Future<_i2.Either<_i5.CacheFailure, _i3.StorageStats>>
      getStorageStats() => (super.noSuchMethod(
            Invocation.method(
              #getStorageStats,
              [],
            ),
            returnValue: _i4
                .Future<_i2.Either<_i5.CacheFailure, _i3.StorageStats>>.value(
                _FakeEither_0<_i5.CacheFailure, _i3.StorageStats>(
              this,
              Invocation.method(
                #getStorageStats,
                [],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.CacheFailure, _i3.StorageStats>>);

  @override
  _i4.Future<_i2.Either<_i5.CacheFailure, _i3.CleanupResult>> cleanupCache({
    bool? removeCorrupted = true,
    bool? removeOrphaned = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #cleanupCache,
          [],
          {
            #removeCorrupted: removeCorrupted,
            #removeOrphaned: removeOrphaned,
          },
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.CacheFailure, _i3.CleanupResult>>.value(
                _FakeEither_0<_i5.CacheFailure, _i3.CleanupResult>(
          this,
          Invocation.method(
            #cleanupCache,
            [],
            {
              #removeCorrupted: removeCorrupted,
              #removeOrphaned: removeOrphaned,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.CacheFailure, _i3.CleanupResult>>);

  @override
  _i4.Future<_i2.Either<_i5.CacheFailure, _i2.Unit>> cancelDownload(
          String? trackId) =>
      (super.noSuchMethod(
        Invocation.method(
          #cancelDownload,
          [trackId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.CacheFailure, _i2.Unit>>.value(
            _FakeEither_0<_i5.CacheFailure, _i2.Unit>(
          this,
          Invocation.method(
            #cancelDownload,
            [trackId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.CacheFailure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i5.CacheFailure, _i2.Unit>> retryDownload(
          String? trackId) =>
      (super.noSuchMethod(
        Invocation.method(
          #retryDownload,
          [trackId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.CacheFailure, _i2.Unit>>.value(
            _FakeEither_0<_i5.CacheFailure, _i2.Unit>(
          this,
          Invocation.method(
            #retryDownload,
            [trackId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.CacheFailure, _i2.Unit>>);
}
