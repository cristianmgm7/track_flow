// Mocks generated by Mockito 5.4.4 from annotations
// in trackflow/test/features/audio_cache/presentation/bloc/track_cache_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:trackflow/features/audio_cache/shared/domain/entities/cached_audio.dart'
    as _i7;
import 'package:trackflow/features/audio_cache/shared/domain/entities/download_progress.dart'
    as _i8;
import 'package:trackflow/features/audio_cache/shared/domain/failures/cache_failure.dart'
    as _i5;
import 'package:trackflow/features/audio_cache/track/domain/usecases/cache_track_usecase.dart'
    as _i3;
import 'package:trackflow/features/audio_cache/track/domain/usecases/get_track_cache_status_usecase.dart'
    as _i6;
import 'package:trackflow/features/audio_cache/track/domain/usecases/remove_track_cache_usecase.dart'
    as _i9;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CacheTrackUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockCacheTrackUseCase extends _i1.Mock implements _i3.CacheTrackUseCase {
  MockCacheTrackUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.CacheFailure, _i2.Unit>> call({
    required String? trackId,
    required String? audioUrl,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {
            #trackId: trackId,
            #audioUrl: audioUrl,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.CacheFailure, _i2.Unit>>.value(
            _FakeEither_0<_i5.CacheFailure, _i2.Unit>(
          this,
          Invocation.method(
            #call,
            [],
            {
              #trackId: trackId,
              #audioUrl: audioUrl,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.CacheFailure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i5.CacheFailure, _i2.Unit>> cacheMultiple(
          {required Map<String, String>? trackUrlPairs}) =>
      (super.noSuchMethod(
        Invocation.method(
          #cacheMultiple,
          [],
          {#trackUrlPairs: trackUrlPairs},
        ),
        returnValue: _i4.Future<_i2.Either<_i5.CacheFailure, _i2.Unit>>.value(
            _FakeEither_0<_i5.CacheFailure, _i2.Unit>(
          this,
          Invocation.method(
            #cacheMultiple,
            [],
            {#trackUrlPairs: trackUrlPairs},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.CacheFailure, _i2.Unit>>);
}

/// A class which mocks [GetTrackCacheStatusUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTrackCacheStatusUseCase extends _i1.Mock
    implements _i6.GetTrackCacheStatusUseCase {
  MockGetTrackCacheStatusUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.CacheFailure, _i7.CacheStatus>> call(
          String? trackId) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [trackId],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.CacheFailure, _i7.CacheStatus>>.value(
                _FakeEither_0<_i5.CacheFailure, _i7.CacheStatus>(
          this,
          Invocation.method(
            #call,
            [trackId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.CacheFailure, _i7.CacheStatus>>);

  @override
  _i4.Future<_i2.Either<_i5.CacheFailure, _i7.CachedAudio?>> getCachedAudio(
          String? trackId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedAudio,
          [trackId],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.CacheFailure, _i7.CachedAudio?>>.value(
                _FakeEither_0<_i5.CacheFailure, _i7.CachedAudio?>(
          this,
          Invocation.method(
            #getCachedAudio,
            [trackId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.CacheFailure, _i7.CachedAudio?>>);

  @override
  _i4.Future<_i2.Either<_i5.CacheFailure, String>> getCachedAudioPath(
          String? trackId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedAudioPath,
          [trackId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.CacheFailure, String>>.value(
            _FakeEither_0<_i5.CacheFailure, String>(
          this,
          Invocation.method(
            #getCachedAudioPath,
            [trackId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.CacheFailure, String>>);

  @override
  _i4.Stream<_i7.CacheStatus> watchCacheStatus(String? trackId) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchCacheStatus,
          [trackId],
        ),
        returnValue: _i4.Stream<_i7.CacheStatus>.empty(),
      ) as _i4.Stream<_i7.CacheStatus>);

  @override
  _i4.Stream<_i8.DownloadProgress> watchDownloadProgress(String? trackId) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchDownloadProgress,
          [trackId],
        ),
        returnValue: _i4.Stream<_i8.DownloadProgress>.empty(),
      ) as _i4.Stream<_i8.DownloadProgress>);

  @override
  _i4.Stream<_i6.TrackCacheInfo> watchTrackCacheInfo(
          {required String? trackId}) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchTrackCacheInfo,
          [],
          {#trackId: trackId},
        ),
        returnValue: _i4.Stream<_i6.TrackCacheInfo>.empty(),
      ) as _i4.Stream<_i6.TrackCacheInfo>);
}

/// A class which mocks [RemoveTrackCacheUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoveTrackCacheUseCase extends _i1.Mock
    implements _i9.RemoveTrackCacheUseCase {
  MockRemoveTrackCacheUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.CacheFailure, _i2.Unit>> call(String? trackId) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [trackId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.CacheFailure, _i2.Unit>>.value(
            _FakeEither_0<_i5.CacheFailure, _i2.Unit>(
          this,
          Invocation.method(
            #call,
            [trackId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.CacheFailure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i5.CacheFailure, _i2.Unit>> removeMultiple(
          List<String>? trackIds) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeMultiple,
          [trackIds],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.CacheFailure, _i2.Unit>>.value(
            _FakeEither_0<_i5.CacheFailure, _i2.Unit>(
          this,
          Invocation.method(
            #removeMultiple,
            [trackIds],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.CacheFailure, _i2.Unit>>);
}
