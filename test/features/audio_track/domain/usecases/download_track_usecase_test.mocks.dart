// Mocks generated by Mockito 5.4.4 from annotations
// in trackflow/test/features/audio_track/domain/usecases/download_track_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;
import 'dart:io' as _i8;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:trackflow/core/app_flow/domain/entities/user_session.dart'
    as _i18;
import 'package:trackflow/core/app_flow/domain/services/session_service.dart'
    as _i17;
import 'package:trackflow/core/entities/unique_id.dart' as _i7;
import 'package:trackflow/core/error/failures.dart' as _i11;
import 'package:trackflow/core/infrastructure/domain/directory_service.dart'
    as _i9;
import 'package:trackflow/features/audio_cache/domain/entities/cached_audio.dart'
    as _i6;
import 'package:trackflow/features/audio_cache/domain/failures/cache_failure.dart'
    as _i5;
import 'package:trackflow/features/audio_cache/domain/repositories/audio_storage_repository.dart'
    as _i3;
import 'package:trackflow/features/audio_track/domain/entities/audio_track.dart'
    as _i12;
import 'package:trackflow/features/audio_track/domain/repositories/audio_track_repository.dart'
    as _i10;
import 'package:trackflow/features/projects/domain/entities/project.dart'
    as _i16;
import 'package:trackflow/features/projects/domain/repositories/projects_repository.dart'
    as _i15;
import 'package:trackflow/features/track_version/domain/entities/track_version.dart'
    as _i14;
import 'package:trackflow/features/track_version/domain/repositories/track_version_repository.dart'
    as _i13;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AudioStorageRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioStorageRepository extends _i1.Mock
    implements _i3.AudioStorageRepository {
  MockAudioStorageRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.CacheFailure, _i6.CachedAudio>> storeAudio(
    _i7.AudioTrackId? trackId,
    _i7.TrackVersionId? versionId,
    _i8.File? audioFile, {
    _i9.DirectoryType? directoryType = _i9.DirectoryType.audioCache,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #storeAudio,
          [
            trackId,
            versionId,
            audioFile,
          ],
          {#directoryType: directoryType},
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.CacheFailure, _i6.CachedAudio>>.value(
                _FakeEither_0<_i5.CacheFailure, _i6.CachedAudio>(
          this,
          Invocation.method(
            #storeAudio,
            [
              trackId,
              versionId,
              audioFile,
            ],
            {#directoryType: directoryType},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.CacheFailure, _i6.CachedAudio>>);

  @override
  _i4.Future<_i2.Either<_i5.CacheFailure, String>> getCachedAudioPath(
    _i7.AudioTrackId? trackId, {
    _i7.TrackVersionId? versionId,
    _i9.DirectoryType? directoryType = _i9.DirectoryType.audioCache,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedAudioPath,
          [trackId],
          {
            #versionId: versionId,
            #directoryType: directoryType,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.CacheFailure, String>>.value(
            _FakeEither_0<_i5.CacheFailure, String>(
          this,
          Invocation.method(
            #getCachedAudioPath,
            [trackId],
            {
              #versionId: versionId,
              #directoryType: directoryType,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.CacheFailure, String>>);

  @override
  _i4.Future<_i2.Either<_i5.CacheFailure, bool>> audioExists(
          _i7.AudioTrackId? trackId) =>
      (super.noSuchMethod(
        Invocation.method(
          #audioExists,
          [trackId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.CacheFailure, bool>>.value(
            _FakeEither_0<_i5.CacheFailure, bool>(
          this,
          Invocation.method(
            #audioExists,
            [trackId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.CacheFailure, bool>>);

  @override
  _i4.Future<_i2.Either<_i5.CacheFailure, bool>> audioVersionExists(
    _i7.AudioTrackId? trackId,
    _i7.TrackVersionId? versionId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #audioVersionExists,
          [
            trackId,
            versionId,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.CacheFailure, bool>>.value(
            _FakeEither_0<_i5.CacheFailure, bool>(
          this,
          Invocation.method(
            #audioVersionExists,
            [
              trackId,
              versionId,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.CacheFailure, bool>>);

  @override
  _i4.Future<_i2.Either<_i5.CacheFailure, _i6.CachedAudio?>> getCachedAudio(
          _i7.AudioTrackId? trackId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedAudio,
          [trackId],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.CacheFailure, _i6.CachedAudio?>>.value(
                _FakeEither_0<_i5.CacheFailure, _i6.CachedAudio?>(
          this,
          Invocation.method(
            #getCachedAudio,
            [trackId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.CacheFailure, _i6.CachedAudio?>>);

  @override
  _i4.Future<
      _i2.Either<_i5.CacheFailure, _i6.CachedAudio?>> getCachedAudioByVersion(
    _i7.AudioTrackId? trackId,
    _i7.TrackVersionId? versionId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getCachedAudioByVersion,
          [
            trackId,
            versionId,
          ],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.CacheFailure, _i6.CachedAudio?>>.value(
                _FakeEither_0<_i5.CacheFailure, _i6.CachedAudio?>(
          this,
          Invocation.method(
            #getCachedAudioByVersion,
            [
              trackId,
              versionId,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.CacheFailure, _i6.CachedAudio?>>);

  @override
  _i4.Future<_i2.Either<_i5.CacheFailure, _i2.Unit>> deleteAudioFile(
          _i7.AudioTrackId? trackId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteAudioFile,
          [trackId],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.CacheFailure, _i2.Unit>>.value(
            _FakeEither_0<_i5.CacheFailure, _i2.Unit>(
          this,
          Invocation.method(
            #deleteAudioFile,
            [trackId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.CacheFailure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i5.CacheFailure, _i2.Unit>> deleteAudioVersionFile(
    _i7.AudioTrackId? trackId,
    _i7.TrackVersionId? versionId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteAudioVersionFile,
          [
            trackId,
            versionId,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.CacheFailure, _i2.Unit>>.value(
            _FakeEither_0<_i5.CacheFailure, _i2.Unit>(
          this,
          Invocation.method(
            #deleteAudioVersionFile,
            [
              trackId,
              versionId,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.CacheFailure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i5.CacheFailure, int>> validateAndCleanCache() =>
      (super.noSuchMethod(
        Invocation.method(
          #validateAndCleanCache,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.CacheFailure, int>>.value(
            _FakeEither_0<_i5.CacheFailure, int>(
          this,
          Invocation.method(
            #validateAndCleanCache,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.CacheFailure, int>>);

  @override
  _i4.Stream<int> watchStorageUsage() => (super.noSuchMethod(
        Invocation.method(
          #watchStorageUsage,
          [],
        ),
        returnValue: _i4.Stream<int>.empty(),
      ) as _i4.Stream<int>);

  @override
  _i4.Future<_i2.Either<_i5.CacheFailure, int>> getStorageUsage() =>
      (super.noSuchMethod(
        Invocation.method(
          #getStorageUsage,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.CacheFailure, int>>.value(
            _FakeEither_0<_i5.CacheFailure, int>(
          this,
          Invocation.method(
            #getStorageUsage,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.CacheFailure, int>>);

  @override
  _i4.Future<_i2.Either<_i5.CacheFailure, int>> getAvailableStorage() =>
      (super.noSuchMethod(
        Invocation.method(
          #getAvailableStorage,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.CacheFailure, int>>.value(
            _FakeEither_0<_i5.CacheFailure, int>(
          this,
          Invocation.method(
            #getAvailableStorage,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.CacheFailure, int>>);

  @override
  _i4.Stream<bool> watchTrackCacheStatus(
    _i7.AudioTrackId? trackId, {
    _i7.TrackVersionId? versionId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchTrackCacheStatus,
          [trackId],
          {#versionId: versionId},
        ),
        returnValue: _i4.Stream<bool>.empty(),
      ) as _i4.Stream<bool>);

  @override
  _i4.Stream<List<_i6.CachedAudio>> watchAllCachedAudios() =>
      (super.noSuchMethod(
        Invocation.method(
          #watchAllCachedAudios,
          [],
        ),
        returnValue: _i4.Stream<List<_i6.CachedAudio>>.empty(),
      ) as _i4.Stream<List<_i6.CachedAudio>>);
}

/// A class which mocks [AudioTrackRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioTrackRepository extends _i1.Mock
    implements _i10.AudioTrackRepository {
  MockAudioTrackRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i11.Failure, _i12.AudioTrack>> getTrackById(
          _i7.AudioTrackId? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTrackById,
          [id],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i11.Failure, _i12.AudioTrack>>.value(
                _FakeEither_0<_i11.Failure, _i12.AudioTrack>(
          this,
          Invocation.method(
            #getTrackById,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i11.Failure, _i12.AudioTrack>>);

  @override
  _i4.Stream<_i2.Either<_i11.Failure, _i12.AudioTrack>> watchTrackById(
          _i7.AudioTrackId? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchTrackById,
          [id],
        ),
        returnValue:
            _i4.Stream<_i2.Either<_i11.Failure, _i12.AudioTrack>>.empty(),
      ) as _i4.Stream<_i2.Either<_i11.Failure, _i12.AudioTrack>>);

  @override
  _i4.Stream<
      _i2.Either<_i11.Failure, List<_i12.AudioTrack>>> watchTracksByProject(
          _i7.ProjectId? projectId) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchTracksByProject,
          [projectId],
        ),
        returnValue:
            _i4.Stream<_i2.Either<_i11.Failure, List<_i12.AudioTrack>>>.empty(),
      ) as _i4.Stream<_i2.Either<_i11.Failure, List<_i12.AudioTrack>>>);

  @override
  _i4.Stream<
      _i2.Either<_i11.Failure, List<_i12.AudioTrack>>> watchAllAccessibleTracks(
          _i7.UserId? userId) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchAllAccessibleTracks,
          [userId],
        ),
        returnValue:
            _i4.Stream<_i2.Either<_i11.Failure, List<_i12.AudioTrack>>>.empty(),
      ) as _i4.Stream<_i2.Either<_i11.Failure, List<_i12.AudioTrack>>>);

  @override
  _i4.Future<_i2.Either<_i11.Failure, _i12.AudioTrack>> createTrack(
          _i12.AudioTrack? track) =>
      (super.noSuchMethod(
        Invocation.method(
          #createTrack,
          [track],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i11.Failure, _i12.AudioTrack>>.value(
                _FakeEither_0<_i11.Failure, _i12.AudioTrack>(
          this,
          Invocation.method(
            #createTrack,
            [track],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i11.Failure, _i12.AudioTrack>>);

  @override
  _i4.Future<_i2.Either<_i11.Failure, _i2.Unit>> deleteTrack(
    _i7.AudioTrackId? trackId,
    _i7.ProjectId? projectId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteTrack,
          [
            trackId,
            projectId,
          ],
        ),
        returnValue: _i4.Future<_i2.Either<_i11.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i11.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #deleteTrack,
            [
              trackId,
              projectId,
            ],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i11.Failure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i11.Failure, _i2.Unit>> editTrackName({
    required _i7.AudioTrackId? trackId,
    required _i7.ProjectId? projectId,
    required String? newName,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #editTrackName,
          [],
          {
            #trackId: trackId,
            #projectId: projectId,
            #newName: newName,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i11.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i11.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #editTrackName,
            [],
            {
              #trackId: trackId,
              #projectId: projectId,
              #newName: newName,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i11.Failure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i11.Failure, _i2.Unit>> setActiveVersion({
    required _i7.AudioTrackId? trackId,
    required _i7.TrackVersionId? versionId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setActiveVersion,
          [],
          {
            #trackId: trackId,
            #versionId: versionId,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i11.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i11.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #setActiveVersion,
            [],
            {
              #trackId: trackId,
              #versionId: versionId,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i11.Failure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i11.Failure, _i2.Unit>> updateTrack(
          _i12.AudioTrack? track) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTrack,
          [track],
        ),
        returnValue: _i4.Future<_i2.Either<_i11.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i11.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #updateTrack,
            [track],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i11.Failure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i11.Failure, _i2.Unit>> deleteAllTracks() =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteAllTracks,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i11.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i11.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #deleteAllTracks,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i11.Failure, _i2.Unit>>);
}

/// A class which mocks [TrackVersionRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTrackVersionRepository extends _i1.Mock
    implements _i13.TrackVersionRepository {
  MockTrackVersionRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i11.Failure, _i14.TrackVersion>> addVersion({
    required _i7.AudioTrackId? trackId,
    required _i8.File? file,
    String? label,
    Duration? duration,
    required _i7.UserId? createdBy,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addVersion,
          [],
          {
            #trackId: trackId,
            #file: file,
            #label: label,
            #duration: duration,
            #createdBy: createdBy,
          },
        ),
        returnValue:
            _i4.Future<_i2.Either<_i11.Failure, _i14.TrackVersion>>.value(
                _FakeEither_0<_i11.Failure, _i14.TrackVersion>(
          this,
          Invocation.method(
            #addVersion,
            [],
            {
              #trackId: trackId,
              #file: file,
              #label: label,
              #duration: duration,
              #createdBy: createdBy,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i11.Failure, _i14.TrackVersion>>);

  @override
  _i4.Stream<_i2.Either<_i11.Failure, List<_i14.TrackVersion>>>
      watchVersionsByTrack(_i7.AudioTrackId? trackId) => (super.noSuchMethod(
            Invocation.method(
              #watchVersionsByTrack,
              [trackId],
            ),
            returnValue: _i4.Stream<
                _i2.Either<_i11.Failure, List<_i14.TrackVersion>>>.empty(),
          ) as _i4.Stream<_i2.Either<_i11.Failure, List<_i14.TrackVersion>>>);

  @override
  _i4.Future<
      _i2.Either<_i11.Failure, List<_i14.TrackVersion>>> getVersionsByTrack(
          _i7.AudioTrackId? trackId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getVersionsByTrack,
          [trackId],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i11.Failure, List<_i14.TrackVersion>>>.value(
                _FakeEither_0<_i11.Failure, List<_i14.TrackVersion>>(
          this,
          Invocation.method(
            #getVersionsByTrack,
            [trackId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i11.Failure, List<_i14.TrackVersion>>>);

  @override
  _i4.Future<_i2.Either<_i11.Failure, _i14.TrackVersion>> getById(
          _i7.TrackVersionId? id) =>
      (super.noSuchMethod(
        Invocation.method(
          #getById,
          [id],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i11.Failure, _i14.TrackVersion>>.value(
                _FakeEither_0<_i11.Failure, _i14.TrackVersion>(
          this,
          Invocation.method(
            #getById,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i11.Failure, _i14.TrackVersion>>);

  @override
  _i4.Future<_i2.Either<_i11.Failure, _i14.TrackVersion>> getActiveVersion(
          _i7.AudioTrackId? trackId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getActiveVersion,
          [trackId],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i11.Failure, _i14.TrackVersion>>.value(
                _FakeEither_0<_i11.Failure, _i14.TrackVersion>(
          this,
          Invocation.method(
            #getActiveVersion,
            [trackId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i11.Failure, _i14.TrackVersion>>);

  @override
  _i4.Future<_i2.Either<_i11.Failure, _i2.Unit>> setActiveVersion({
    required _i7.AudioTrackId? trackId,
    required _i7.TrackVersionId? versionId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #setActiveVersion,
          [],
          {
            #trackId: trackId,
            #versionId: versionId,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i11.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i11.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #setActiveVersion,
            [],
            {
              #trackId: trackId,
              #versionId: versionId,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i11.Failure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i11.Failure, _i2.Unit>> deleteVersion(
          _i7.TrackVersionId? versionId) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteVersion,
          [versionId],
        ),
        returnValue: _i4.Future<_i2.Either<_i11.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i11.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #deleteVersion,
            [versionId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i11.Failure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i11.Failure, _i2.Unit>> renameVersion({
    required _i7.TrackVersionId? versionId,
    required String? newLabel,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #renameVersion,
          [],
          {
            #versionId: versionId,
            #newLabel: newLabel,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i11.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i11.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #renameVersion,
            [],
            {
              #versionId: versionId,
              #newLabel: newLabel,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i11.Failure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i11.Failure, _i2.Unit>> clearCache() =>
      (super.noSuchMethod(
        Invocation.method(
          #clearCache,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i11.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i11.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #clearCache,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i11.Failure, _i2.Unit>>);
}

/// A class which mocks [ProjectsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockProjectsRepository extends _i1.Mock
    implements _i15.ProjectsRepository {
  MockProjectsRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i11.Failure, _i16.Project>> createProject(
          _i16.Project? project) =>
      (super.noSuchMethod(
        Invocation.method(
          #createProject,
          [project],
        ),
        returnValue: _i4.Future<_i2.Either<_i11.Failure, _i16.Project>>.value(
            _FakeEither_0<_i11.Failure, _i16.Project>(
          this,
          Invocation.method(
            #createProject,
            [project],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i11.Failure, _i16.Project>>);

  @override
  _i4.Future<_i2.Either<_i11.Failure, _i2.Unit>> updateProject(
          _i16.Project? project) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateProject,
          [project],
        ),
        returnValue: _i4.Future<_i2.Either<_i11.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i11.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #updateProject,
            [project],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i11.Failure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i11.Failure, _i2.Unit>> deleteProject(
          _i16.Project? project) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteProject,
          [project],
        ),
        returnValue: _i4.Future<_i2.Either<_i11.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i11.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #deleteProject,
            [project],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i11.Failure, _i2.Unit>>);

  @override
  _i4.Future<_i2.Either<_i11.Failure, _i16.Project>> getProjectById(
          _i7.ProjectId? projectId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getProjectById,
          [projectId],
        ),
        returnValue: _i4.Future<_i2.Either<_i11.Failure, _i16.Project>>.value(
            _FakeEither_0<_i11.Failure, _i16.Project>(
          this,
          Invocation.method(
            #getProjectById,
            [projectId],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i11.Failure, _i16.Project>>);

  @override
  _i4.Stream<_i2.Either<_i11.Failure, List<_i16.Project>>> watchLocalProjects(
          _i7.UserId? ownerId) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchLocalProjects,
          [ownerId],
        ),
        returnValue:
            _i4.Stream<_i2.Either<_i11.Failure, List<_i16.Project>>>.empty(),
      ) as _i4.Stream<_i2.Either<_i11.Failure, List<_i16.Project>>>);

  @override
  _i4.Future<_i2.Either<_i11.Failure, _i2.Unit>> clearLocalCache() =>
      (super.noSuchMethod(
        Invocation.method(
          #clearLocalCache,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i11.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i11.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #clearLocalCache,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i11.Failure, _i2.Unit>>);

  @override
  _i4.Stream<_i2.Either<_i11.Failure, _i16.Project?>> watchProjectById(
          _i7.ProjectId? projectId) =>
      (super.noSuchMethod(
        Invocation.method(
          #watchProjectById,
          [projectId],
        ),
        returnValue:
            _i4.Stream<_i2.Either<_i11.Failure, _i16.Project?>>.empty(),
      ) as _i4.Stream<_i2.Either<_i11.Failure, _i16.Project?>>);
}

/// A class which mocks [SessionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockSessionService extends _i1.Mock implements _i17.SessionService {
  MockSessionService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i11.Failure, _i18.UserSession>> getCurrentSession() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCurrentSession,
          [],
        ),
        returnValue:
            _i4.Future<_i2.Either<_i11.Failure, _i18.UserSession>>.value(
                _FakeEither_0<_i11.Failure, _i18.UserSession>(
          this,
          Invocation.method(
            #getCurrentSession,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i11.Failure, _i18.UserSession>>);

  @override
  _i4.Future<_i2.Either<_i11.Failure, bool>> isAuthenticated() =>
      (super.noSuchMethod(
        Invocation.method(
          #isAuthenticated,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i11.Failure, bool>>.value(
            _FakeEither_0<_i11.Failure, bool>(
          this,
          Invocation.method(
            #isAuthenticated,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i11.Failure, bool>>);

  @override
  _i4.Future<_i2.Either<_i11.Failure, String?>> getCurrentUserId() =>
      (super.noSuchMethod(
        Invocation.method(
          #getCurrentUserId,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i11.Failure, String?>>.value(
            _FakeEither_0<_i11.Failure, String?>(
          this,
          Invocation.method(
            #getCurrentUserId,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i11.Failure, String?>>);

  @override
  _i4.Future<_i2.Either<_i11.Failure, _i2.Unit>> clearSession() =>
      (super.noSuchMethod(
        Invocation.method(
          #clearSession,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i11.Failure, _i2.Unit>>.value(
            _FakeEither_0<_i11.Failure, _i2.Unit>(
          this,
          Invocation.method(
            #clearSession,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i11.Failure, _i2.Unit>>);
}
