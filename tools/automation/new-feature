#!/bin/bash

# TrackFlow Feature Generator Script
# Simple wrapper around generate_feature.py

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Show usage
show_usage() {
    echo -e "${BLUE}TrackFlow Feature Generator${NC}"
    echo ""
    echo "Usage: ./new-feature <feature_name> [options]"
    echo ""
    echo "Options:"
    echo "  --with-tests        Generate test files"
    echo "  --skip-presentation Skip BLoC/UI files"
    echo "  --help             Show this help"
    echo ""
    echo "Examples:"
    echo "  ./new-feature notifications"
    echo "  ./new-feature user_settings --with-tests"
    echo "  ./new-feature analytics --skip-presentation"
    echo ""
}

# Check if Python is available
check_python() {
    if ! command -v python3 &> /dev/null && ! command -v python &> /dev/null; then
        echo -e "${RED}Error: Python is required but not installed.${NC}"
        exit 1
    fi
}

# Check if we're in the project root
check_project_root() {
    if [[ ! -f "pubspec.yaml" ]]; then
        echo -e "${RED}Error: Must be run from the TrackFlow project root directory.${NC}"
        exit 1
    fi
}

# Main execution
main() {
    # Show help if no arguments or --help
    if [[ $# -eq 0 ]] || [[ "$1" == "--help" ]] || [[ "$1" == "-h" ]]; then
        show_usage
        exit 0
    fi

    # Validate environment
    check_python
    check_project_root

    # Get feature name
    feature_name="$1"
    shift

    # Validate feature name
    if [[ ! "$feature_name" =~ ^[a-z_]+$ ]]; then
        echo -e "${RED}Error: Feature name must be in snake_case (lowercase with underscores).${NC}"
        echo "Example: user_settings, audio_processing, notification_system"
        exit 1
    fi

    # Check if feature already exists
    if [[ -d "lib/features/$feature_name" ]]; then
        echo -e "${YELLOW}Warning: Feature '$feature_name' already exists.${NC}"
        read -p "Continue anyway? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            echo "Cancelled."
            exit 0
        fi
    fi

    # Run the Python generator
    echo -e "${BLUE}Generating feature: $feature_name${NC}"
    
    if command -v python3 &> /dev/null; then
        python3 generate_feature.py "$feature_name" "$@"
    else
        python generate_feature.py "$feature_name" "$@"
    fi

    # Post-generation steps
    if [[ $? -eq 0 ]]; then
        echo ""
        echo -e "${GREEN}ðŸŽ‰ Feature generated successfully!${NC}"
        echo ""
        echo -e "${YELLOW}Next steps:${NC}"
        echo "1. Add schema to app_module.dart:"
        echo -e "   ${BLUE}${feature_name^}DocumentSchema,${NC}"
        echo ""
        echo "2. Run code generation:"
        echo -e "   ${BLUE}flutter packages pub run build_runner build --delete-conflicting-outputs${NC}"
        echo ""
        echo "3. Check the generated files and customize as needed"
        echo ""
        
        # Ask if user wants to run build_runner
        read -p "Run build_runner now? (y/N): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            echo -e "${BLUE}Running build_runner...${NC}"
            flutter packages pub run build_runner build --delete-conflicting-outputs
        fi
    else
        echo -e "${RED}Error: Feature generation failed.${NC}"
        exit 1
    fi
}

# Run main function with all arguments
main "$@"