# TrackFlow Collaboration Invitation System - Definitive Implementation Plan

## Overview

Replace the current hardcoded collaborator addition with a proper invitation system that requires user consent before adding collaborators to projects. This plan incorporates feedback for cleaner architecture and better separation of concerns.

## Current Problems

1. **Direct Addition**: Users are added to projects without consent
2. **Hardcoded IDs**: Using email as UserId instead of proper user lookup
3. **No Invitation Flow**: No way to invite users who don't exist in the system
4. **No Notifications**: No way to notify users of pending invitations
5. **Poor Architecture**: Single bloc handling multiple responsibilities

## Proposed Solution: Invitation-Based Collaboration

### Core Principles

- **Explicit Consent**: Users must accept invitations before joining projects
- **Dual Flow**: Support both existing users and new users
- **Clean Architecture**: Separate Actor/Watcher BLoCs for better separation of concerns
- **Notification Integration**: Automatic notification creation and management
- **Magic Link Integration**: Seamless onboarding for new users

**folder structure**

lib/
├── core/
│ └── notifications/ # 🎯 CORE NOTIFICATION SYSTEM
│ └── domain/
│ ├── entities/
│ │ ├── notification.dart
│ │ └── notification_id.dart
│ ├── repositories/
│ │ └── notification_repository.dart
│ ├── services/
│ │ └── notification_service.dart
│ └── usecases/
│ └── observe_notifications_usecase.dart
│
└── features/
└── invitations/ # 🎯 USES CORE NOTIFICATIONS
└── domain/
└── usecases/
├── send_invitation.dart # Uses NotificationService
└── accept_invitation.dart # Uses NotificationService

### Architecture Overview

```
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   Presentation  │    │     Domain      │    │      Data       │
│                 │    │                 │    │                 │
│ ┌─────────────┐ │    │ ┌─────────────┐ │    │ ┌─────────────┐ │
│ │Actor BLoC   │ │    │ │Use Cases    │ │    │ │Repositories │ │
│ │             │ │    │ │             │ │    │ │             │ │
│ │• Send Inv   │ │    │ │• Send Inv   │ │    │ │• Local DB   │ │
│ │• Accept Inv │ │    │ │• Accept Inv │ │    │ │• Remote API │ │
│ │• Decline Inv│ │    │ │• Decline Inv│ │    │ │• Cache      │ │
│ │• Cancel Inv │ │    │ │• Cancel Inv │ │    │ │             │ │
│ └─────────────┘ │    │ └─────────────┘ │    │ └─────────────┘ │
│                 │    │                 │    │                 │
│ ┌─────────────┐ │    │ ┌─────────────┐ │    │ ┌─────────────┐ │
│ │Watcher BLoC │ │    │ │Entities     │ │    │ │DTOs         │ │
│ │             │ │    │ │             │ │    │ │             │ │
│ │• Watch Inv  │ │    │ │• Invitation │ │    │ │• Invitation │ │
│ │• Watch Notif│ │    │ │• Notification│ │    │ │• Notification│ │
│ │• Counts     │ │    │ │• Status     │ │    │ │• Status     │ │
│ └─────────────┘ │    │ └─────────────┘ │    │ └─────────────┘ │
└─────────────────┘    └─────────────────┘    └─────────────────┘
```

## Implementation Phases

### Phase 1: Domain Layer ✅ (COMPLETED + REFACTORED)

**Status**: ✅ **COMPLETED** - All domain components created with proper clean architecture

#### ✅ Completed Tasks:

- [x] **InvitationId** - Unique identifier for invitations
- [x] **ProjectInvitation** - Core invitation entity with domain methods
- [x] **InvitationRepository** - Repository interface (Actor/Watcher pattern)
- [x] **FindUserByEmailUseCase** - Search for existing users
- [x] **SendInvitationUseCase** - Send invitations (existing + new users)
- [x] **AcceptInvitationUseCase** - Accept invitations and add to project
- [x] **DeclineInvitationUseCase** - Decline invitations
- [x] **ObservePendingInvitationsUseCase** - Watch pending invitations
- [x] **ObserveSentInvitationsUseCase** - Watch sent invitations
- [x] **GetPendingInvitationsCountUseCase** - Get pending count
- [x] **CancelInvitationUseCase** - Cancel sent invitations
- [x] **InvitationExceptions** - Domain exceptions
- [x] **InvitationFailures** - Domain failures
- [x] **Domain Barrel File** - Export all domain components

#### ✅ **REFACTORED: Core Notifications System**

- [x] **Core Notification Entity** - Moved to `lib/core/notifications/domain/entities/notification.dart`
- [x] **Core Notification Repository** - Moved to `lib/core/notifications/domain/repositories/notification_repository.dart`
- [x] **Core Notification Service** - Created `lib/core/notifications/domain/services/notification_service.dart`
- [x] **Core Notification Use Cases** - Moved to core notifications domain
- [x] **Updated Invitation Use Cases** - Now use core NotificationService
- [x] **Clean Separation** - Notifications are now a cross-cutting concern

#### 🔧 Issues to Fix:

- [x] **ID Constructor Issue** - Fix InvitationId and NotificationId constructors
- [x] **ProjectRepository Integration** - Add when ProjectRepository is available
- [x] **UserProfileRepository Integration** - Add when UserProfileRepository is available

### Phase 2: Data Layer

**Status**: 🔄 **IN PROGRESS** - Next phase to implement

#### Tasks:

- [x] **InvitationDto** - Data transfer object for invitations
- [x] **NotificationDto** - Data transfer object for notifications (in core)
- [x] **InvitationLocalDataSource** - Local database operations
- [x] **NotificationLocalDataSource** - Local database operations (in core)
- [x] **InvitationRemoteDataSource** - Remote API operations
- [x] **NotificationRemoteDataSource** - Remote API operations (in core)
- [x] **InvitationRepositoryImpl** - Repository implementation
- [x] **NotificationRepositoryImpl** - Repository implementation (in core)
- [x] **InvitationMapper** - Entity ↔ DTO mapping
- [x] **NotificationMapper** - Entity ↔ DTO mapping (in core)
- [x] **Data Barrel File** - Export all data components

### Phase 3: Split BLoCs

**Status**: ⏳ **PENDING**

#### Tasks:

- [ x] **ProjectInvitationWatcherBloc** - Observe invitation state changes
- [ x] **ProjectInvitationActorBloc** - Handle user actions
- [ x] **NotificationWatcherBloc** - Observe notification state changes (in core)
- [ x] **NotificationActorBloc** - Handle notification actions (in core)
- [ x] **InvitationStates** - State classes for invitation BLoCs
- [ x] **NotificationStates** - State classes for notification BLoCs (in core)
- [ x] **InvitationEvents** - Event classes for invitation BLoCs
- [ x] **NotificationEvents** - Event classes for notification BLoCs (in core)

### Phase 4: UI Components

**Status**: ⏳ **PENDING**

#### Tasks:

- [ ] **SendInvitationForm** - Form to send invitations
- [ ] **PendingInvitationsList** - List of pending invitations
- [ ] **SentInvitationsList** - List of sent invitations
- [ ] **InvitationCard** - Individual invitation display
- [ ] **NotificationCenterScreen** - Main notification screen (in core)
- [ ] **NotificationList** - List of notifications (in core)
- [ ] **NotificationCard** - Individual notification display (in core)
- [ ] **InvitationActionButtons** - Accept/Decline buttons

### Phase 5: Notification System

**Status**: ⏳ **PENDING**

#### Tasks:

- [ ] **NotificationBadge** - Badge showing unread count (in core)
- [ ] **NotificationIcon** - Icon with notification indicator (in core)
- [ ] **NotificationDrawer** - Drawer for notifications (in core)
- [ ] **NotificationSettings** - Notification preferences (in core)
- [ ] **NotificationSound** - Sound for new notifications (in core)
- [ ] **NotificationVibration** - Vibration for notifications (in core)

### Phase 6: Magic Link Integration

**Status**: ⏳ **PENDING**

#### Tasks:

- [ ] **Update MagicLinkRepository** - Add invitation support
- [ ] **InvitationMagicLink** - Magic link for invitations
- [ ] **EmailTemplateService** - Email template generation
- [ ] **EmailSendingService** - Email sending functionality
- [ ] **MagicLinkHandler** - Handle invitation magic links
- [ ] **InvitationSignupFlow** - Signup flow for invited users
- [ ] **AutoJoinProject** - Automatically join project after signup

### Phase 7: Integration & Updates

**Status**: ⏳ **PENDING**

#### Tasks:

- [ ] **Update ProjectRepository** - Add collaborator management
- [ ] **Update UserProfileRepository** - Add email search
- [ ] **Update AppRouter** - Add invitation routes
- [ ] **Update Navigation** - Add notification navigation
- [ ] **Update DI Container** - Register new dependencies
- [ ] **Update Tests** - Add comprehensive tests

### Phase 8: Testing & Validation

**Status**: ⏳ **PENDING**

#### Tasks:

- [ ] **Unit Tests** - Test all use cases and entities
- [ ] **Integration Tests** - Test repository implementations
- [ ] **BLoC Tests** - Test all BLoCs
- [ ] **Widget Tests** - Test UI components
- [ ] **End-to-End Tests** - Test complete flows
- [ ] **Performance Tests** - Test with large datasets

### Phase 9: Documentation & Polish

**Status**: ⏳ **PENDING**

#### Tasks:

- [ ] **API Documentation** - Document all endpoints
- [ ] **User Documentation** - User guide for invitations
- [ ] **Developer Documentation** - Technical documentation
- [ ] **Code Comments** - Add comprehensive comments
- [ ] **Error Handling** - Improve error messages
- [ ] **Accessibility** - Ensure accessibility compliance

## Detailed Implementation Plan

### Invitation Flow

#### For Existing Users:

1. **Send Invitation** → Create invitation record
2. **Create Notification** → Notify user immediately (via core NotificationService)
3. **User Sees Notification** → In notification center
4. **User Accepts/Declines** → Update invitation status
5. **Add to Project** → Only after acceptance

#### For New Users:

1. **Send Invitation** → Create invitation record
2. **Generate Magic Link** → Create signup link
3. **Send Email** → Email with magic link
4. **User Clicks Link** → Opens app with signup
5. **User Signs Up** → Create account
6. **Auto-Join Project** → Automatically join project

### Notification System (Core)

#### Notification Types:

- **Project Invitation** - When invited to project
- **Invitation Accepted** - When invitation is accepted
- **Invitation Declined** - When invitation is declined
- **Collaborator Joined** - When someone joins project
- **Audio Comment Added** - When someone comments on track
- **Audio Track Uploaded** - When someone uploads a track
- **System Message** - General system notifications

#### Notification Features:

- **Real-time Updates** - Live notification updates
- **Badge Count** - Unread notification count
- **Mark as Read** - Individual and bulk mark as read
- **Notification Center** - Dedicated notification screen
- **Cross-Feature Support** - All features can create notifications

### Magic Link Integration

#### Magic Link Flow:

1. **Generate Link** - Create unique invitation link
2. **Email Template** - Professional invitation email
3. **Deep Link** - App opens to invitation screen
4. **Signup Flow** - Streamlined signup process
5. **Auto-Join** - Automatically join project

## Success Metrics

### Performance Metrics:

- **App Startup Time** - < 2 seconds (no impact)
- **Invitation Send Time** - < 1 second
- **Notification Delivery** - < 500ms
- **Magic Link Processing** - < 2 seconds

### User Experience Metrics:

- **Invitation Acceptance Rate** - Target > 70%
- **Time to Accept Invitation** - Target < 24 hours
- **User Satisfaction** - Target > 4.5/5
- **Error Rate** - Target < 1%

### Technical Metrics:

- **Code Coverage** - Target > 90%
- **Test Pass Rate** - Target 100%
- **Build Time** - No significant increase
- **App Size** - < 5MB increase

## Risk Mitigation

### Technical Risks:

- **ID Constructor Issues** - Use existing ID patterns
- **Repository Dependencies** - Implement with TODOs
- **BLoC Complexity** - Keep Actor/Watcher separation
- **Database Schema** - Plan migration strategy

### User Experience Risks:

- **Notification Spam** - Implement rate limiting
- **Magic Link Security** - Use secure token generation
- **Email Delivery** - Use reliable email service
- **App Performance** - Monitor and optimize

## Next Steps

1. **Fix ID Constructor Issues** - Resolve InvitationId/NotificationId
2. **Start Phase 2** - Implement Data Layer
3. **Create Repository Implementations** - Local and remote data sources
4. **Add DTOs and Mappers** - Data transfer objects
5. **Implement BLoCs** - Actor and Watcher patterns

---

## 📋 **COMPREHENSIVE TODO CHECKLIST**

### ✅ **Phase 1: Domain Layer** (13/13 tasks) - **COMPLETED + REFACTORED**

- [x] Create `InvitationId` entity
- [x] Create `ProjectInvitation` entity with domain methods
- [x] Create `InvitationRepository` interface (Actor/Watcher pattern)
- [x] Create `FindUserByEmailUseCase`
- [x] Create `SendInvitationUseCase` (existing + new users)
- [x] Create `AcceptInvitationUseCase` (accept + add to project)
- [x] Create `DeclineInvitationUseCase`
- [x] Create `ObservePendingInvitationsUseCase`
- [x] Create `ObserveSentInvitationsUseCase`
- [x] Create `GetPendingInvitationsCountUseCase`
- [x] Create `CancelInvitationUseCase`
- [x] Create domain exceptions
- [x] Create domain failures
- [x] Create domain barrel file

### ✅ **REFACTORED: Core Notifications System** (5/5 tasks) - **COMPLETED**

- [x] **Move Notification Entity** to `lib/core/notifications/domain/entities/notification.dart`
- [x] **Move Notification Repository** to `lib/core/notifications/domain/repositories/notification_repository.dart`
- [x] **Create Notification Service** in `lib/core/notifications/domain/services/notification_service.dart`
- [x] **Move Notification Use Cases** to core notifications domain
- [x] **Update Invitation Use Cases** to use core NotificationService

### 🔄 **Phase 2: Data Layer** (12 tasks) - **NEXT**

- [ ] Create `InvitationDto` data transfer object
- [ ] Create `NotificationDto` data transfer object (in core)
- [ ] Create `InvitationLocalDataSource` for local database
- [ ] Create `NotificationLocalDataSource` for local database (in core)
- [ ] Create `InvitationRemoteDataSource` for remote API
- [ ] Create `NotificationRemoteDataSource` for remote API (in core)
- [ ] Create `InvitationRepositoryImpl` implementation
- [ ] Create `NotificationRepositoryImpl` implementation (in core)
- [ ] Create `InvitationMapper` (Entity ↔ DTO)
- [ ] Create `NotificationMapper` (Entity ↔ DTO) (in core)
- [ ] Create data barrel file
- [ ] Add database schema migrations

### ⏳ **Phase 3: Split BLoCs** (8 tasks)

- [ ] Create `ProjectInvitationWatcherBloc` (observe state changes)
- [ ] Create `ProjectInvitationActorBloc` (handle user actions)
- [ ] Create `NotificationWatcherBloc` (observe notifications) (in core)
- [ ] Create `NotificationActorBloc` (handle notification actions) (in core)
- [ ] Create invitation states classes
- [ ] Create notification states classes (in core)
- [ ] Create invitation events classes
- [ ] Create notification events classes (in core)

### ⏳ **Phase 4: UI Components** (8 tasks)

- [ ] Create `SendInvitationForm` component
- [ ] Create `PendingInvitationsList` component
- [ ] Create `SentInvitationsList` component
- [ ] Create `InvitationCard` component
- [ ] Create `NotificationCenterScreen` (in core)
- [ ] Create `NotificationList` component (in core)
- [ ] Create `NotificationCard` component (in core)
- [ ] Create `InvitationActionButtons` (Accept/Decline)

### ⏳ **Phase 5: Notification System** (6 tasks)

- [ ] Create `NotificationBadge` component (in core)
- [ ] Create `NotificationIcon` component (in core)
- [ ] Create `NotificationDrawer` component (in core)
- [ ] Create `NotificationSettings` screen (in core)
- [ ] Add notification sound functionality (in core)
- [ ] Add notification vibration functionality (in core)

### ⏳ **Phase 6: Magic Link Integration** (7 tasks)

- [ ] Update existing `MagicLinkRepository` for invitations
- [ ] Create `InvitationMagicLink` entity
- [ ] Create `EmailTemplateService` for invitation emails
- [ ] Create `EmailSendingService` for sending emails
- [ ] Create `MagicLinkHandler` for invitation links
- [ ] Create `InvitationSignupFlow` for new users
- [ ] Implement `AutoJoinProject` functionality

### ⏳ **Phase 7: Integration & Updates** (6 tasks)

- [ ] Update `ProjectRepository` with collaborator management
- [ ] Update `UserProfileRepository` with email search
- [ ] Update `AppRouter` with invitation routes
- [ ] Update navigation with notification routes
- [ ] Update DI container with new dependencies
- [ ] Update existing tests and add new ones

### ⏳ **Phase 8: Testing & Validation** (6 tasks)

- [ ] Write unit tests for all use cases
- [ ] Write integration tests for repositories
- [ ] Write BLoC tests for all BLoCs
- [ ] Write widget tests for UI components
- [ ] Write end-to-end tests for complete flows
- [ ] Write performance tests for large datasets

### ⏳ **Phase 9: Documentation & Polish** (6 tasks)

- [ ] Write API documentation for all endpoints
- [ ] Write user documentation for invitation feature
- [ ] Write developer documentation for implementation
- [ ] Add comprehensive code comments
- [ ] Improve error handling and messages
- [ ] Ensure accessibility compliance

---

**Total Progress**: 18/79 tasks completed (22.8%)
**Current Phase**: Phase 1 ✅ COMPLETED + REFACTORED
**Next Phase**: Phase 2 - Data Layer 🔄
